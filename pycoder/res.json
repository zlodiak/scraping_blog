[
{"title": "======Как я наговнокодил", "body": ["Я думал, что пишу только хороший код, думал, что не могу наговнокодить. Ну, вроде имею какой-то опыт. Никогда так не ошибался. И задача была, в принципе, элементарной, но, видимо, не нaстолько простой, как показалось мне на первый взгляд.", "Представьте, что у вас есть строка вида ", ", вам нужно взять из нее только цифры. \"Что может быть проще?\", - подумал я и, конечно, не сделал так:", "Я так не сделал, я ж не говнокодер! Кроме того, я решил не использовать регулярки, потому что, как говорится, \"Если у тебя есть проблема и ты ее решил регуляркой, то у тебя две проблемы\". Я сделал так:", "Это, конечно лол, но мне казалось это хорошим решением. Но что, если вариантов нецифровых символов будет больше, что, переписывать код? Не говоря уже о том, что это можно сделать короче и красивее. Увидев этот код, коллега попросил меня его срочно переписать, и он был прав. Сначала стоит вспомнить, что у строки есть метод ", "Ну или, к примеру, так, если вы любите лямбды:", "Кроме того, мое предубеждение по поводу регулярок оказалось чрезмерным. Если рассудить здраво, то их можно и нужно использовать в подходящих ситуациях, просто делать это надо с умом. Как вам, например такой вариант?", "Ну или так:", "Этот случай меня научил тому, что никогда не нужно переставать сомневаться в себе и в своем коде. Кто-то говорит, что нужно быть уверенным в себе. А я считаю, но настоящая уверенность в себе заключается в осознании того, что всегда есть шанс напороть косяков.", "Вообще говоря, мне кажется, здесь есть определенное противоречие: с одной стороны, все повторяют как мантру, что нужно быть уверенным в себе, а следовательно и в своей работе, но, с другой стороны нужно критически относиться к себе. Вот, что ", ":"], "date": ["6 октября 2018 г.", "Я думал, что пишу только хороший код, думал, что не могу наговнокодить. Ну, вроде имею какой-то опыт. Никогда так не ошибался. И задача была, в принципе, элементарной, но, видимо, не нaстолько простой, как показалось мне на первый взгляд.", "Представьте, что у вас есть строка вида ", ", вам нужно взять из нее только цифры. \"Что может быть проще?\", - подумал я и, конечно, не сделал так:", "Я так не сделал, я ж не говнокодер! Кроме того, я решил не использовать регулярки, потому что, как говорится, \"Если у тебя есть проблема и ты ее решил регуляркой, то у тебя две проблемы\". Я сделал так:", "Это, конечно лол, но мне казалось это хорошим решением. Но что, если вариантов нецифровых символов будет больше, что, переписывать код? Не говоря уже о том, что это можно сделать короче и красивее. Увидев этот код, коллега попросил меня его срочно переписать, и он был прав. Сначала стоит вспомнить, что у строки есть метод ", "Ну или, к примеру, так, если вы любите лямбды:", "Кроме того, мое предубеждение по поводу регулярок оказалось чрезмерным. Если рассудить здраво, то их можно и нужно использовать в подходящих ситуациях, просто делать это надо с умом. Как вам, например такой вариант?", "Ну или так:", "Этот случай меня научил тому, что никогда не нужно переставать сомневаться в себе и в своем коде. Кто-то говорит, что нужно быть уверенным в себе. А я считаю, но настоящая уверенность в себе заключается в осознании того, что всегда есть шанс напороть косяков.", "Вообще говоря, мне кажется, здесь есть определенное противоречие: с одной стороны, все повторяют как мантру, что нужно быть уверенным в себе, а следовательно и в своей работе, но, с другой стороны нужно критически относиться к себе. Вот, что ", ":"]},
{"title": "======Про парадокс Монти Холла", "body": ["В теории вероятностей есть забавный парадокс - парадокс Монти Холла. В этом посте хочу немного с ним разобраться, потому что с первого взгляда он кажется странным и контринтуитивным, поэтому и считается парадоксом. Хотя, по сути, эта задача - не парадокс, потому что не имеет противоречия.", "Проблема описывается так: есть три двери, за одной из них автомобиль, за двумя другими - козлы. И мы не знаем где что находится, нам надо угадать, где автомобиль:", "И мы случайным образом выбираем какую-то дверь в первый раз, например первую:", "После этого ведущий, который в отличие от нас знает где что расположено, открывает какую-нибудь из невыбранных нами дверей с козлом (в данном случае ему остаётся открыть вторую дверь):", "И затем ведущий нас спрашивает о том, будем ли мы менять свой выбор. То есть в данном случае спрашивает о том, оставляем ли мы выбранной первую дверь или меняем решение, выбирая третью. Чтобы ответить на этот вопрос, надо понять в каком случае вероятность выиграть больше. Есть два варианта развития событий:", "Очевидно, что если не менять свое решение, то вероятность выиграть - это вероятность выбрать один автомобиль из трех вариантов:", "$$P\\left\\{ выиграть,\\spaceне\\spaceменяя\\spaceвыбор\\right\\} = \\frac{1}{3}$$", "Если же мы меняем свой выбор, то мы выиграем только в том случае, если с первой попытки выбрали козла. Выбрать козла можно двумя способами из трех. То есть в этом случае мы выиграем с вероятностью:", "$$P\\left\\{ выиграть,\\spaceменяя\\spaceвыбор\\right\\} = \\frac{2}{3}$$", "Теперь проверим это, используя python:", "И этот скрипт даст следующий результат:", "Что совпадает с теоретическими соображениями. Если вам когда-либо доведется участвовать в подобной викторине, то меняйте свой выбор, ведь вы тогда в 2 раза увеличите вероятность выиграть приз."], "date": ["25 апреля 2019 г.", "В теории вероятностей есть забавный парадокс - парадокс Монти Холла. В этом посте хочу немного с ним разобраться, потому что с первого взгляда он кажется странным и контринтуитивным, поэтому и считается парадоксом. Хотя, по сути, эта задача - не парадокс, потому что не имеет противоречия.", "Проблема описывается так: есть три двери, за одной из них автомобиль, за двумя другими - козлы. И мы не знаем где что находится, нам надо угадать, где автомобиль:", "И мы случайным образом выбираем какую-то дверь в первый раз, например первую:", "После этого ведущий, который в отличие от нас знает где что расположено, открывает какую-нибудь из невыбранных нами дверей с козлом (в данном случае ему остаётся открыть вторую дверь):", "И затем ведущий нас спрашивает о том, будем ли мы менять свой выбор. То есть в данном случае спрашивает о том, оставляем ли мы выбранной первую дверь или меняем решение, выбирая третью. Чтобы ответить на этот вопрос, надо понять в каком случае вероятность выиграть больше. Есть два варианта развития событий:", "Очевидно, что если не менять свое решение, то вероятность выиграть - это вероятность выбрать один автомобиль из трех вариантов:", "$$P\\left\\{ выиграть,\\spaceне\\spaceменяя\\spaceвыбор\\right\\} = \\frac{1}{3}$$", "Если же мы меняем свой выбор, то мы выиграем только в том случае, если с первой попытки выбрали козла. Выбрать козла можно двумя способами из трех. То есть в этом случае мы выиграем с вероятностью:", "$$P\\left\\{ выиграть,\\spaceменяя\\spaceвыбор\\right\\} = \\frac{2}{3}$$", "Теперь проверим это, используя python:", "И этот скрипт даст следующий результат:", "Что совпадает с теоретическими соображениями. Если вам когда-либо доведется участвовать в подобной викторине, то меняйте свой выбор, ведь вы тогда в 2 раза увеличите вероятность выиграть приз."]},
{"title": "======Две задачи с собеседования в amazon", "body": ["Некоторое время назад мне на linkedin'e написала hr из амазона, я согласился попытаться решить несколько задач. Задачи вроде решил корректно, но следующий этап собеседования не состоялся. Не знаю почему, но мы просто не смогли созвониться. В этом посте расскажу о двух задачах. Я вроде бы их верно решил.", "Первая задача - написать функцию, которая принимает на вход 6 чисел, и надо из них составить наименьшее возможное время. Время должно быть в формате ", ", если составить его невозможно, то следует вернуть строку ", ".", "Примеры того как функция может вызываться, и что она должна возвращать:", "Поскольку время на задания было ограничено, то я решил пойти по самому простому и очевидному пути - решать эту проблему полным перебором. Есть в стандартной библиотеке модуль ", ". Также, в нем есть функция ", ", с помощью которой можно получить все перестановки списка, пример:", "Если я правильно помню, то математика нам говорит о том, что перестановок должно быть ", ", как видно, именно ", " перестановок списка из ", " элементов мы и получили.", "Тогда алгоритм решения может быть таким:", "У меня получилось это сделать так (не утверждаю, что данное решение оптимальное):", "Проверю себя с помощью ", ":", "Вроде правильно. Может быть, я не учел все граничные случаи, но в какой-то степени решение рабочее.", "Во второй задаче надо определить минимальное количество лучей, выпущенных из начала координат, и проходящих через все точки на плоскости. То есть у нас есть система координат и несколько точек:", "В данном случае у нас ", " точки, поэтому количество лучей - ", ". Если же у нас есть 5 точек:", "То в этом случае у нас в первом квадранте три точки, и по одной точке во втором и третьем, соответственно, нам понадобится ", " луча. То есть, решить задачу можно, разбивая плоскость на ", " квадранта. Для задачи задается класс ", ":", "Примеры того, как функция должна работать, на вход задается массив точек:", "Я решил данную задачу так:", "Проверяю себя:", "Хоть я решил эти две задачи (надеюсь что правильно), но второй этап собеседования не состоялся из-за того, что когда мне позвонили для проведения второго этапа, мне было неудобно, вроде бы мы перенесли второй этап, но в итоге мне так и не позвонили, но опыт все равно интересный."], "date": ["29 сентября 2019 г.", "Некоторое время назад мне на linkedin'e написала hr из амазона, я согласился попытаться решить несколько задач. Задачи вроде решил корректно, но следующий этап собеседования не состоялся. Не знаю почему, но мы просто не смогли созвониться. В этом посте расскажу о двух задачах. Я вроде бы их верно решил.", "Первая задача - написать функцию, которая принимает на вход 6 чисел, и надо из них составить наименьшее возможное время. Время должно быть в формате ", ", если составить его невозможно, то следует вернуть строку ", ".", "Примеры того как функция может вызываться, и что она должна возвращать:", "Поскольку время на задания было ограничено, то я решил пойти по самому простому и очевидному пути - решать эту проблему полным перебором. Есть в стандартной библиотеке модуль ", ". Также, в нем есть функция ", ", с помощью которой можно получить все перестановки списка, пример:", "Если я правильно помню, то математика нам говорит о том, что перестановок должно быть ", ", как видно, именно ", " перестановок списка из ", " элементов мы и получили.", "Тогда алгоритм решения может быть таким:", "У меня получилось это сделать так (не утверждаю, что данное решение оптимальное):", "Проверю себя с помощью ", ":", "Вроде правильно. Может быть, я не учел все граничные случаи, но в какой-то степени решение рабочее.", "Во второй задаче надо определить минимальное количество лучей, выпущенных из начала координат, и проходящих через все точки на плоскости. То есть у нас есть система координат и несколько точек:", "В данном случае у нас ", " точки, поэтому количество лучей - ", ". Если же у нас есть 5 точек:", "То в этом случае у нас в первом квадранте три точки, и по одной точке во втором и третьем, соответственно, нам понадобится ", " луча. То есть, решить задачу можно, разбивая плоскость на ", " квадранта. Для задачи задается класс ", ":", "Примеры того, как функция должна работать, на вход задается массив точек:", "Я решил данную задачу так:", "Проверяю себя:", "Хоть я решил эти две задачи (надеюсь что правильно), но второй этап собеседования не состоялся из-за того, что когда мне позвонили для проведения второго этапа, мне было неудобно, вроде бы мы перенесли второй этап, но в итоге мне так и не позвонили, но опыт все равно интересный."]},
{"title": "======Про книгу Задача трех тел Лю Цысиня", "body": ["В этом посте хотел бы рассказать про книгу \"Задача трех тел\" за авторством китайского фантаста ", ". Некоторое время назад прочитал эту книгу, и она очень понравилась, вообще, это одна из лучших книг в жанре фантастика, которых я читал.", " Это первая книга данного автора из трех, связанных между собой произведений. Сначала она мне показалась довольно нудной, но затем сюжет начал набирать обороты, многие непонятности объяснились, и в итоге мне захотелось прочитать также две следующие книги этого цикла.", "Сначала может показаться, что это не фантастика, а скорее что-то историческое, потому что автор много пишет об истории Китая, точнее о шестидесятых годах двадцатого века, о времени ", " в КНР. Не берусь сказать насколько исторически достоверно, потому что в истории не силен. Возможно из-за этого у меня книжка сначала не вызвала большого интереса, хотелось чего-то более захватывающего.", "Тем не менее, читать я не бросил, и не жалею. Я попытаюсь не спойлерить сюжет, просто скажу, что книга - очень качественная научная фантастика, заставляет задуматься о многих вещах: о важности научно-технического прогресса, о том, что будет с человечеством в критической ситуации - сплотится оно, или наоборот будет разделено.", "\"Задача трех тел\" говорит о том, что космос - это, возможно, гораздо более жестокое и непредсказуемое место, чем мы думаем. И может быть, стоит строить связи и относиться более гуманно к другим людям тут, на Земле, и не надеяться, что потенциальные внеземные цивилизации руководствуются какими-то нравственными нормами. И может быть, не так уж и плохо, что мы не знаем ни одной внеземной цивилизации.", "Для меня теперь \"Задача трех тел\" - одна из любимых книг в жанре фантастика, наряду с \"Пикником на обочине\" Стругацких."], "date": ["2 ноября 2019 г.", "В этом посте хотел бы рассказать про книгу \"Задача трех тел\" за авторством китайского фантаста ", ". Некоторое время назад прочитал эту книгу, и она очень понравилась, вообще, это одна из лучших книг в жанре фантастика, которых я читал.", " Это первая книга данного автора из трех, связанных между собой произведений. Сначала она мне показалась довольно нудной, но затем сюжет начал набирать обороты, многие непонятности объяснились, и в итоге мне захотелось прочитать также две следующие книги этого цикла.", "Сначала может показаться, что это не фантастика, а скорее что-то историческое, потому что автор много пишет об истории Китая, точнее о шестидесятых годах двадцатого века, о времени ", " в КНР. Не берусь сказать насколько исторически достоверно, потому что в истории не силен. Возможно из-за этого у меня книжка сначала не вызвала большого интереса, хотелось чего-то более захватывающего.", "Тем не менее, читать я не бросил, и не жалею. Я попытаюсь не спойлерить сюжет, просто скажу, что книга - очень качественная научная фантастика, заставляет задуматься о многих вещах: о важности научно-технического прогресса, о том, что будет с человечеством в критической ситуации - сплотится оно, или наоборот будет разделено.", "\"Задача трех тел\" говорит о том, что космос - это, возможно, гораздо более жестокое и непредсказуемое место, чем мы думаем. И может быть, стоит строить связи и относиться более гуманно к другим людям тут, на Земле, и не надеяться, что потенциальные внеземные цивилизации руководствуются какими-то нравственными нормами. И может быть, не так уж и плохо, что мы не знаем ни одной внеземной цивилизации.", "Для меня теперь \"Задача трех тел\" - одна из любимых книг в жанре фантастика, наряду с \"Пикником на обочине\" Стругацких."]},
{"title": "======Модель Солнечной системы на vpython", "body": ["Есть такая библиотека - ", ", с помощью нее можно создавать различные анимации и рисовать 3d объекты. Интересно было бы смоделировать хотя бы очень простую версию Солнечной системы. У меня не получилось сделать это самому, поэтому я нанял человека на upwork, чтобы он помог мне. Код в данном посте не мой, а этого человека, я лишь немного изменил его.", "Сначала установим vpython:", "Попробуем нарисовать сферу:", "Теперь, если все работает, начнем с того, что зададимся константами, нужными для дальнейших вычислений:", "Далее вычислим гравитационные силы между Солнцем и Землей и между Землей и Луной по формуле:", "$$F=G\\frac{m1\\cdot m2}{R^2}$$", "Далее вычисляем угловые скорости и обычные по формулам", "$$\\omega=\\sqrt{\\frac{F}{m\\cdot r}}$$", "$$v=\\omega\\cdot r$$", "Далее рисуем сами сферы, которые будут представлять Солнце, Землю и Луну, конечно размеры не в масштабе для наглядности:", "Потом, используя полярные координаты, обновляем позиции тел при каждом шаге:", "Итого получилось:", "Также, я сделал видео работы данного скрипта, по-моему, получилось неплохо:"], "date": ["12 ноября 2018 г.", "Есть такая библиотека - ", ", с помощью нее можно создавать различные анимации и рисовать 3d объекты. Интересно было бы смоделировать хотя бы очень простую версию Солнечной системы. У меня не получилось сделать это самому, поэтому я нанял человека на upwork, чтобы он помог мне. Код в данном посте не мой, а этого человека, я лишь немного изменил его.", "Сначала установим vpython:", "Попробуем нарисовать сферу:", "Теперь, если все работает, начнем с того, что зададимся константами, нужными для дальнейших вычислений:", "Далее вычислим гравитационные силы между Солнцем и Землей и между Землей и Луной по формуле:", "$$F=G\\frac{m1\\cdot m2}{R^2}$$", "Далее вычисляем угловые скорости и обычные по формулам", "$$\\omega=\\sqrt{\\frac{F}{m\\cdot r}}$$", "$$v=\\omega\\cdot r$$", "Далее рисуем сами сферы, которые будут представлять Солнце, Землю и Луну, конечно размеры не в масштабе для наглядности:", "Потом, используя полярные координаты, обновляем позиции тел при каждом шаге:", "Итого получилось:", "Также, я сделал видео работы данного скрипта, по-моему, получилось неплохо:"]},
{"title": "======Разбираемся с with в питоне", "body": ["Данная статья - перевод c моим небольшим дополнением, ", ". ", "Часто ключевое слово ", " не до конца понятно даже опытным разработчикам.", "Как и многие другие вещи в Python, ключевое слово ", " на самом деле очень просто устроено, это станет очевидно, как только вы поймете какую проблему оно решает. Посмотрите на данный код:", "Здесь под \"set things up\" подразумевается открытие файла, подключение какого-то внешнего ресурса, а под \"tear things down\" - закрытие файла, отключение от внешнего ресурса. Конструкция ", " гарантирует, что \"tear things down\" часть будет всегда исполнена, даже если код, делающий что-либо вызовет ошибку или не завершится.", "Если это часто ипользуется, то было бы удобно вынести код  “set things up” и “tear things down” в библиотечную функцию, чтобы легко ее использовать. Конечно, вы можете сделать что-то вроде:", "Но это немного многословно, особенно если вам нужно изменять локальные переменные. Другой подход заключается в использовании генератора, а затем нужно использовать ", ":", "Но ", " нельзя было использовать внутри ", " в 2.4 и раньше. И немного странно использовать loop для чего-то, что вы хотите выполнить один раз.", "Поэтому, после рассмотрения нескольких вариантов, Гвидо Ван Россум и python-dev команда наконец решили использовать объект вместо генератора, чтобы контролировать поведение данного кода:", "Теперь, когда \"with\" выражение исполняется, Python исполняет выражение, вызывает метод ", "с полученным значением (которое называется \"context guard\"), затем присваивает переменной переданной словом ", " (в данном случае thing) то, что возвращает метод ", ". Далее, Python исполняет тело (в данное случае some code), и в любом случае вызывает метод ", ".", "В добавок, ", " может подавить исключение, вернуть вместо него True. Например, этот ", " заменяет ", ", но разрешает все другие исключения:", "Например:", "Но:", "В Python 2.5 у объекта типа file появились методы ", " и ", ", первый просто возвращает сам объект, а второй закрывает файл:", "Поэтому, чтобы открыть файл, сделать что-то с содержимым и точно закрыть его, вы просто делаете так:", "Это не было очень сложно, правда?"], "date": ["18 февраля 2018 г.", "Данная статья - перевод c моим небольшим дополнением, ", ". ", "Часто ключевое слово ", " не до конца понятно даже опытным разработчикам.", "Как и многие другие вещи в Python, ключевое слово ", " на самом деле очень просто устроено, это станет очевидно, как только вы поймете какую проблему оно решает. Посмотрите на данный код:", "Здесь под \"set things up\" подразумевается открытие файла, подключение какого-то внешнего ресурса, а под \"tear things down\" - закрытие файла, отключение от внешнего ресурса. Конструкция ", " гарантирует, что \"tear things down\" часть будет всегда исполнена, даже если код, делающий что-либо вызовет ошибку или не завершится.", "Если это часто ипользуется, то было бы удобно вынести код  “set things up” и “tear things down” в библиотечную функцию, чтобы легко ее использовать. Конечно, вы можете сделать что-то вроде:", "Но это немного многословно, особенно если вам нужно изменять локальные переменные. Другой подход заключается в использовании генератора, а затем нужно использовать ", ":", "Но ", " нельзя было использовать внутри ", " в 2.4 и раньше. И немного странно использовать loop для чего-то, что вы хотите выполнить один раз.", "Поэтому, после рассмотрения нескольких вариантов, Гвидо Ван Россум и python-dev команда наконец решили использовать объект вместо генератора, чтобы контролировать поведение данного кода:", "Теперь, когда \"with\" выражение исполняется, Python исполняет выражение, вызывает метод ", "с полученным значением (которое называется \"context guard\"), затем присваивает переменной переданной словом ", " (в данном случае thing) то, что возвращает метод ", ". Далее, Python исполняет тело (в данное случае some code), и в любом случае вызывает метод ", ".", "В добавок, ", " может подавить исключение, вернуть вместо него True. Например, этот ", " заменяет ", ", но разрешает все другие исключения:", "Например:", "Но:", "В Python 2.5 у объекта типа file появились методы ", " и ", ", первый просто возвращает сам объект, а второй закрывает файл:", "Поэтому, чтобы открыть файл, сделать что-то с содержимым и точно закрыть его, вы просто делаете так:", "Это не было очень сложно, правда?"]},
{"title": "======Пишем игру алфавит, используя питон, tkinter", "body": ["Как-то раз один друг попросил меня сделать версию игры \"Алфавит\", которую можно было бы запускать без доступа к интернету. Суть игры заключается в том, что вам с определенным интервалом показывается две буквы, верхнюю букву нужно произнести в слух, а нижняя буква означает то, какую руку или руки вам нужно в этот момент поднять. Допустим верхняя буква - \"А\", нижняя - \"П\", значит называем букву \"А\", поднимая вверх правую руку. Буквы каждый раз меняются. Более подробно об игре можно прочитать ", " (осторожно, концентрация сомнительной информации большая, берегите свой мозг).  ", "Мне задача показалась интересной с чисто технической стороны, я никоим образом не интересуюсь НЛП и прочим. Я вообще не уверен, что эта игра способна как-то повлиять на работу мозга, а тем более ввести в \"состояние сверхвысокой продуктивности\", лол. Просто интересная задачка, потому что раньше я почти не делал ничего такого, связанного с GUI.", "Вообще, по идее, ", " ", " в стандартную библиотеку, но возможно вам понадобится ее установить, почему так, честно, не знаю, но мне пришлось:", "Пожалуй, начнем с меню настроек игры. Это первый экран, который увидет пользователь. Там будут следующие настройки: ", "Из библиотеки ", " нам понадобится несколько элементов:", "На строке 88 я привязываю вызов функции ", " к клику по кнопке \"Играть\", используя ", ". Функция open_frame пока просто принтит настройки в консоль.", "После запуска получите примерно такую картинку, по нажатию на кнопку \"Играть\" вы увидите в консоли все переданные переменные:", "Выглядит, конечно, страшновато, но для моей задачи хватит. Теперь давайте сделаем так, чтобы по клику на кнопку \"Играть\" открывалось бы новое окно, а окно настроек исчезало бы. Нужно изменить функцию ", ", чтобы она открывала новое окно, добавить функции ", " и ", " для того, чтобы прятать и показывать снова окно настроек соответственно, также надо добавить импорт модуля ", ":", "Также, надо добавить класс ", ", который будет отвечать за саму игру. В нем будет описана вся логика, в нем я буду использовать класс ", ", потому что нужно будет отображать буквы:", "Теперь должно получится что-то такое:", "Теперь надо добавить логику игры. Импортируем ", " и зададимся настройками игры (цвета, буквы, шрифты):", "Также, надо поменять класс ", ", добавив в него обработку хотя бы первого варианта, когда все переменные ", ", ", ", ", ", ", " не выбраны (равны 0):", "Смысл в том, что после каждого показа двух букв я меняю буквы функцией ", ", с задержкой, определяемой переменной ", ". На данном этапе вы можете сыграть в игру только в одном случае (нулевых настроек). Теперь осталось расписать все оставшиеся варианты. Код получился довольно длинным, поэтому лучше я просто дам ", ".", "Сделана простая игра, зато с GUI.", "Видео игры:"], "date": ["1 апреля 2018 г.", "Как-то раз один друг попросил меня сделать версию игры \"Алфавит\", которую можно было бы запускать без доступа к интернету. Суть игры заключается в том, что вам с определенным интервалом показывается две буквы, верхнюю букву нужно произнести в слух, а нижняя буква означает то, какую руку или руки вам нужно в этот момент поднять. Допустим верхняя буква - \"А\", нижняя - \"П\", значит называем букву \"А\", поднимая вверх правую руку. Буквы каждый раз меняются. Более подробно об игре можно прочитать ", " (осторожно, концентрация сомнительной информации большая, берегите свой мозг).  ", "Мне задача показалась интересной с чисто технической стороны, я никоим образом не интересуюсь НЛП и прочим. Я вообще не уверен, что эта игра способна как-то повлиять на работу мозга, а тем более ввести в \"состояние сверхвысокой продуктивности\", лол. Просто интересная задачка, потому что раньше я почти не делал ничего такого, связанного с GUI.", "Я решил делать игру на питоне 3, используя gui библиотеку ", ".", "Вообще, по идее, ", " ", " в стандартную библиотеку, но возможно вам понадобится ее установить, почему так, честно, не знаю, но мне пришлось:", "Пожалуй, начнем с меню настроек игры. Это первый экран, который увидет пользователь. Там будут следующие настройки: ", "Из библиотеки ", " нам понадобится несколько элементов:", "На строке 88 я привязываю вызов функции ", " к клику по кнопке \"Играть\", используя ", ". Функция open_frame пока просто принтит настройки в консоль.", "После запуска получите примерно такую картинку, по нажатию на кнопку \"Играть\" вы увидите в консоли все переданные переменные:", "Выглядит, конечно, страшновато, но для моей задачи хватит. Теперь давайте сделаем так, чтобы по клику на кнопку \"Играть\" открывалось бы новое окно, а окно настроек исчезало бы. Нужно изменить функцию ", ", чтобы она открывала новое окно, добавить функции ", " и ", " для того, чтобы прятать и показывать снова окно настроек соответственно, также надо добавить импорт модуля ", ":", "Также, надо добавить класс ", ", который будет отвечать за саму игру. В нем будет описана вся логика, в нем я буду использовать класс ", ", потому что нужно будет отображать буквы:", "Теперь должно получится что-то такое:", "Теперь надо добавить логику игры. Импортируем ", " и зададимся настройками игры (цвета, буквы, шрифты):", "Также, надо поменять класс ", ", добавив в него обработку хотя бы первого варианта, когда все переменные ", ", ", ", ", ", ", " не выбраны (равны 0):", "Смысл в том, что после каждого показа двух букв я меняю буквы функцией ", ", с задержкой, определяемой переменной ", ". На данном этапе вы можете сыграть в игру только в одном случае (нулевых настроек). Теперь осталось расписать все оставшиеся варианты. Код получился довольно длинным, поэтому лучше я просто дам ", ".", "Сделана простая игра, зато с GUI.", "Видео игры:"]},
{"title": "======Поздравляем кого-то с днем рождения, используя питон", "body": ["Иногда у кого-нибудь день рождения, и ты хочешь ее/его поздравить, но не знаешь как. Но ты знаешь, что хочешь сделать что-то своими руками. Можно, конечно чего-нибудь придумать с ардуино, но часто просто лень. Может быть, можно сделать какую-нибудь простую анимацию? Да, и в стандартной библиотеке есть модуль ", ".", "Исходная идея не моя, ", ". Торт хороший, мне очень нравится, но, разумеется, надо добавить что-то свое. Я буду рисовать солнышко:", "На строке 12 задается скорость отрисовки, можете поиграть с этим параметром. Стр. 15-22 - отрисовка самого тела солнца. Потом стр. 25-43 я рисую сначала перпендикулярные лучи, а потом строки 46-67 - четыре диагональные луча. Ну а потом, просто добавлю отрисовку торта, в итоге получилось:", "Вроде ок, но чего-то не хватает, можно попробовать каким-то образом добавить проигрывание трека happy birthday, может переделать это все на ", ". Но я сделал проще: записал видео с экрана и потом на него добавил трек. Если хотите, то вы можете использовать ", ", чтобы сделать из этого скриптика exe."], "date": ["24 июня 2018 г.", "Иногда у кого-нибудь день рождения, и ты хочешь ее/его поздравить, но не знаешь как. Но ты знаешь, что хочешь сделать что-то своими руками. Можно, конечно чего-нибудь придумать с ардуино, но часто просто лень. Может быть, можно сделать какую-нибудь простую анимацию? Да, и в стандартной библиотеке есть модуль ", ".", "Исходная идея не моя, ", ". Торт хороший, мне очень нравится, но, разумеется, надо добавить что-то свое. Я буду рисовать солнышко:", "На строке 12 задается скорость отрисовки, можете поиграть с этим параметром. Стр. 15-22 - отрисовка самого тела солнца. Потом стр. 25-43 я рисую сначала перпендикулярные лучи, а потом строки 46-67 - четыре диагональные луча. Ну а потом, просто добавлю отрисовку торта, в итоге получилось:", "Вроде ок, но чего-то не хватает, можно попробовать каким-то образом добавить проигрывание трека happy birthday, может переделать это все на ", ". Но я сделал проще: записал видео с экрана и потом на него добавил трек. Если хотите, то вы можете использовать ", ", чтобы сделать из этого скриптика exe."]},
{"title": "======Юнит - тесты, использование mock и jsonschema", "body": ["К коду необходимо писать тесты, функционал должен быть как можно лучше покрыт ими. Это аксиома, недаром существует TDD (Test Driven Development), при котором вы сначала пишете тесты, а только потом функционал. В этом посте я попытаюсь осветить использование замечательных библиотек ", " и ", ", которые могут облегчить тестирование, например, вашего API.", "Например у вас есть два файла:", "В ", " используется какое-то стороннее API для получения данных:", "А в ", " эта функция тестируется, допустим так:", "Чтобы запустить тест нужно просто исполнить файл ", ":", "У этого подхода есть как минимум один существенный недостаток - тест зависит от внешнего API, которое, вообще говоря, может и не работать. В этом случае наш тест перестанет проходить. И это очень нехорошо. Что же делать? Можно использовать mock, чтобы \"подменить\" часть кода, которая взаимодействует с API, ", ":", "Я вынес код, вызывающий API в отдельную функцию, чтобы я мог ее мокнуть, ", "То есть я сначала использую декоратор ", ", чтобы получить доступ к заменяемой функции, затем создаю объект - пустышку ", ", который, тем не менее, имеет атрибут ", ", равный 200, и имеет функцию ", ", которая возвращает словарь. И затем я делаю так, чтобы функция ", " возвращала созданный ", ". Таким образом, я могу быть уверен, что мой тест будет работать независимо от внешнего API, однако, проблема есть в том, что мне, возможно, придется переписать тест, если внешнее API изменится. Но зато, я могу быть уверен, что тест не сломается.", "Еще одна проблема, связанная с кодом в ", ", заключается в том, что я не проверяю всю json структуру целиком, а только одно отдельное поле - ", ". Однако, есть способ протестировать весь json целиком используя jsonschema. Сначала установим эту библиотеку:", "Далее я распишу требуемую схему и буду валидировать ответ, ", ":", "Обратите внимание на строчку 18 - ", ", она очень важна, если ее убрать, то эти поля не будут считаться обязательными в схеме, и если какого-то из них не будет, то ничего не произойдет, что недопустимо, ведь в этом случае тест пройдет. Так что, эта строка необходима, чтобы перечисленные поля считались обязательными, если вы закомментируете, к примеру строку 26, убрав из словаря поля ", ", то при проверке схемы будет ошибка:", "В данной статье я попытался описать то, как я тестирую функционал, взаимодействующий с API, надеюсь, кому-то это будет полезно."], "date": ["6 октября 2018 г.", "К коду необходимо писать тесты, функционал должен быть как можно лучше покрыт ими. Это аксиома, недаром существует TDD (Test Driven Development), при котором вы сначала пишете тесты, а только потом функционал. В этом посте я попытаюсь осветить использование замечательных библиотек ", " и ", ", которые могут облегчить тестирование, например, вашего API.", "Например у вас есть два файла:", "В ", " используется какое-то стороннее API для получения данных:", "А в ", " эта функция тестируется, допустим так:", "Чтобы запустить тест нужно просто исполнить файл ", ":", "У этого подхода есть как минимум один существенный недостаток - тест зависит от внешнего API, которое, вообще говоря, может и не работать. В этом случае наш тест перестанет проходить. И это очень нехорошо. Что же делать? Можно использовать mock, чтобы \"подменить\" часть кода, которая взаимодействует с API, ", ":", "Я вынес код, вызывающий API в отдельную функцию, чтобы я мог ее мокнуть, ", "То есть я сначала использую декоратор ", ", чтобы получить доступ к заменяемой функции, затем создаю объект - пустышку ", ", который, тем не менее, имеет атрибут ", ", равный 200, и имеет функцию ", ", которая возвращает словарь. И затем я делаю так, чтобы функция ", " возвращала созданный ", ". Таким образом, я могу быть уверен, что мой тест будет работать независимо от внешнего API, однако, проблема есть в том, что мне, возможно, придется переписать тест, если внешнее API изменится. Но зато, я могу быть уверен, что тест не сломается.", "Еще одна проблема, связанная с кодом в ", ", заключается в том, что я не проверяю всю json структуру целиком, а только одно отдельное поле - ", ". Однако, есть способ протестировать весь json целиком используя jsonschema. Сначала установим эту библиотеку:", "Далее я распишу требуемую схему и буду валидировать ответ, ", ":", "Обратите внимание на строчку 18 - ", ", она очень важна, если ее убрать, то эти поля не будут считаться обязательными в схеме, и если какого-то из них не будет, то ничего не произойдет, что недопустимо, ведь в этом случае тест пройдет. Так что, эта строка необходима, чтобы перечисленные поля считались обязательными, если вы закомментируете, к примеру строку 26, убрав из словаря поля ", ", то при проверке схемы будет ошибка:", "В данной статье я попытался описать то, как я тестирую функционал, взаимодействующий с API, надеюсь, кому-то это будет полезно."]},
{"title": "======Знакомство с Docker. Проверка работоспособности бэкапа", "body": ["Очень хотелось немного познакомиться с замечательным инструментом для виртуализации - Docker. Раньше, когда его не было, бал правила связка Vagrant + VirtualBox. Но сейчас в моде Docker, я считаю, заслуженно. В этом посте я попытаюсь научиться использовать Docker для проверки работоспособности бэкапов. В качестве подопытных выбрал Django и PostgreSQL.", "В моем понимании, Docker - это средство виртуализации, в отличие от Vagrant, который является менеджером средств виртуализации. Подробнее о различиях между Vagrant+VirtualBox и Docker ", ".", "В отличие от VirtualBox, Docker работает с контейнерами, а не с полноценными виртуальными машинами, последние более \"тяжеловесны\" и зачастую избыточны для простого разработчика:", "Я буду работать с Docker под убунтой, потому что при работе в Windows с Docker могут быть проблемы, связанные с кастомными файерволлами (например ", " у меня иногда блокировал Docker'у создание виртуальной машины). Начнем с ", " Docker CE:", "Необходимые пакеты:", "Добавляем GPG - ключ:", "Добавляем репозиторий:", "Ставим Docker CE:", "Проверяем:", "Проверить также можно следующим способом:", "Должен был создаться контейнер:", "Теперь, когда Docker установлен, можно создать базовое Django - приложение. Наш первый шаг - это запустить Django проект из-под Docker. Создадим Django проект:", "Затем, в корень проекта необходимо добавить ", ", который будет описывать изображение (image):", "Добавим файл зависимостей ", " следующего содержания:", "Структура проекта следующая:", "Теперь можно создать наш image, находясь в корне проекта ", ":", "Посмотрим, создалось ли image:", "Как видно, изображение djangotest появилось в списке, это хорошо, теперь можно поднять контейнер (находясь в корневой папке проекта):", "Если все ок, то теперь можно перейти на localhost:4000 и увидеть работающий django проект:", "А если что-то пошло не так, и Вы хотите начать все заново, то эта команда удалит все изображения и контейнеры:", "Если же все ок, то перейдем к следующему шагу - создание простой модели и добавление ее в админку:", ":", ":", ":", "На стр. 34 добавил ", " в ", ", а также поменял на стр. 44 настройки БД на PostreSQL.", "Следующий шаг - запустить в двух контейнерах связку Django + PostgreSQL и создать несколько книг через админку. Для этого понадобится ", ", эта утилита позволит нам создать сразу два контейнера: один для Django, другой для PostgreSQL. ", " docker-compose:", "Проверим:", "Создадим файл ", " в корне проекта:", "Заметьте, что файл ", " зависит от ", " через эту строчку (15 строка):", "А также, на строке 9 задается то, что папка хоста ", " будет \"проброшена\" в папку", " в контейнер ", ". То есть папка ", " будет доступна внутри контейнера.", "Структура:", "Также, последние две строчки в ", " можно закомментировать, потому что эти действия теперь описаны в файле ", ":", "Собираем контейнеры:", "Запускаем:", "По идее, все должно подняться, но если что-то не так, то можно сначала посмотреть список контейнеров:", "А затем зайти внутрь контейнера:", "В результате будет создано и запущено два контейнера: ", " для ", " и ", " для ", ". Далее, применим миграции:", "Создадим пользователя:", "Теперь создадим книжку через админку:", "Теперь сделаем бэкап базы, выполнив команду в соответствующем контейнере:", "В результате, в контейнере ", " в папке ", " (в корневой) должен появиться файл бэкапа ", ". Теперь скопирую файл бэкапа на хост. Команда для копирования:", "В нашем случае:", "Теперь для чистоты эксперимента удалю изображения и контейнеры:", "Затем заново:", "И, теперь, восстановим бэкап, используя ранее сохраненный файл:", "Все получилось!", "Выводы", "Надеюсь, я смог на базовом уровне разобраться с ", ", ", ", ", ", также научился проверять работоспособность бэкапов."], "date": ["10 августа 2018 г.", "Очень хотелось немного познакомиться с замечательным инструментом для виртуализации - Docker. Раньше, когда его не было, бал правила связка Vagrant + VirtualBox. Но сейчас в моде Docker, я считаю, заслуженно. В этом посте я попытаюсь научиться использовать Docker для проверки работоспособности бэкапов. В качестве подопытных выбрал Django и PostgreSQL.", "В моем понимании, Docker - это средство виртуализации, в отличие от Vagrant, который является менеджером средств виртуализации. Подробнее о различиях между Vagrant+VirtualBox и Docker ", ".", "В отличие от VirtualBox, Docker работает с контейнерами, а не с полноценными виртуальными машинами, последние более \"тяжеловесны\" и зачастую избыточны для простого разработчика:", "Я буду работать с Docker под убунтой, потому что при работе в Windows с Docker могут быть проблемы, связанные с кастомными файерволлами (например ", " у меня иногда блокировал Docker'у создание виртуальной машины). Начнем с ", " Docker CE:", "Необходимые пакеты:", "Добавляем GPG - ключ:", "Добавляем репозиторий:", "Ставим Docker CE:", "Проверяем:", "Проверить также можно следующим способом:", "Должен был создаться контейнер:", "Теперь, когда Docker установлен, можно создать базовое Django - приложение. Наш первый шаг - это запустить Django проект из-под Docker. Создадим Django проект:", "Затем, в корень проекта необходимо добавить ", ", который будет описывать изображение (image):", "Добавим файл зависимостей ", " следующего содержания:", "Структура проекта следующая:", "Теперь можно создать наш image, находясь в корне проекта ", ":", "Посмотрим, создалось ли image:", "Как видно, изображение djangotest появилось в списке, это хорошо, теперь можно поднять контейнер (находясь в корневой папке проекта):", "Если все ок, то теперь можно перейти на localhost:4000 и увидеть работающий django проект:", "А если что-то пошло не так, и Вы хотите начать все заново, то эта команда удалит все изображения и контейнеры:", "Если же все ок, то перейдем к следующему шагу - создание простой модели и добавление ее в админку:", ":", ":", ":", "На стр. 34 добавил ", " в ", ", а также поменял на стр. 44 настройки БД на PostreSQL.", "Следующий шаг - запустить в двух контейнерах связку Django + PostgreSQL и создать несколько книг через админку. Для этого понадобится ", ", эта утилита позволит нам создать сразу два контейнера: один для Django, другой для PostgreSQL. ", " docker-compose:", "Проверим:", "Создадим файл ", " в корне проекта:", "Заметьте, что файл ", " зависит от ", " через эту строчку (15 строка):", "А также, на строке 9 задается то, что папка хоста ", " будет \"проброшена\" в папку", " в контейнер ", ". То есть папка ", " будет доступна внутри контейнера.", "Структура:", "Также, последние две строчки в ", " можно закомментировать, потому что эти действия теперь описаны в файле ", ":", "Собираем контейнеры:", "Запускаем:", "По идее, все должно подняться, но если что-то не так, то можно сначала посмотреть список контейнеров:", "А затем зайти внутрь контейнера:", "В результате будет создано и запущено два контейнера: ", " для ", " и ", " для ", ". Далее, применим миграции:", "Создадим пользователя:", "Теперь создадим книжку через админку:", "Теперь сделаем бэкап базы, выполнив команду в соответствующем контейнере:", "В результате, в контейнере ", " в папке ", " (в корневой) должен появиться файл бэкапа ", ". Теперь скопирую файл бэкапа на хост. Команда для копирования:", "В нашем случае:", "Теперь для чистоты эксперимента удалю изображения и контейнеры:", "Затем заново:", "И, теперь, восстановим бэкап, используя ранее сохраненный файл:", "Все получилось!", "Выводы", "Надеюсь, я смог на базовом уровне разобраться с ", ", ", ", ", ", также научился проверять работоспособность бэкапов."]},
{"title": "======Книга про нейтронные звезды", "body": ["Недавно прочитал научно-популярную книгу про нейтронные звезды. Хочу рассказать о прочитанном. Называется книга \"", "\". Автор - Сергей Попов, доктор физико-математических наук, астрофизик и популяризатор науки, ведущий научный сотрудник института имени П.К. Штернберга (ГАИШ МГУ). Несколько лет проработал в европейских университетах и обсерваториях. Основная область его научных интересов - астрофизика нейтронных звезд.", "На ютубе можно найти много его лекций, например:", "Автор считает, что нейтронные звезды гораздо интереснее черных дыр. Это уникальные физические лаборатории по изучению экстремальных процессов и состояний. Недаром за изучение нейтронных звезд астрономы уже получили две Нобелевские премии, и дело этим явно не ограничится.", "В книге рассказывается, как с помощью различных телескопов - от радио до рентгеновских и гамма, - а также используя детекторы нейтрино и гравитационных волн, астрофизики исследуют эти суперобъекты, объединившие в себе всю современную физику. Мы сейчас описываем мир, пользуясь тремя фундаментальными теориями: Специальной теорией относительности, Общей теорией относительности и квантовой механикой.", "Есть известный рисунок - ", "-карта или \"куб теорий\", придуманный физиком Матвеем Бронштейном. На нем есть три координатные оси, одна из которых соответствует росту важности квантовых эффектов, другая - приближению к скорости света, а третья - увеличению гравитационного поля. Начало координат соотвествует классической механике. Переместившись в самую дальнюю от начала координат вершину куба, - столкнемся с процессами, требующими для своего описания так назвыаемой \"Теории всего\", которая объединит все известные взаимодействия.", "Если представить на этом рисунке место нейтронных звезд, то среди всех непосредственно наблюдаемых макроскопических объектов они окажутся самыми удаленными от начала координат. Для адекватного описания нейтронных звезд необходимы все три фундаментальных теории. Конечно, недра черных дыр должны быть еще экзотичнее, но их мы не можем наблюдать.", "Почему эти звезды называют нейтронными? Потому что они в основном состоят из нейтронов, условия в недрах этих звезд такие, что происходит нейтронизация - процесс множественного захвата электронов атомными ядрами. Протоны превращаются в нейтроны.", "Звезды рождаются и умирают. То, какой будет жизнь звезды зависит от ее массы. Легкие звезды живут очень долго и очень медленно пережигают водород в гелий. Поскольку Вселенной всего лишь 13 милиардов лет с небольшим, то даже самые первые из легких звезд (с массой раза в два меньше солнечной и более легкие) должны доживать до наших дней. Массивные звезды живут меньше просто потому, что они светят ярче и быстрее пережигают свой запас водорода, хотя его и больше, но светимость очень резко растет с ростом массы из-за роста температуры и плотности в центре. Если звезда имеет массу порядка солнечной, то она живет где-то 10-12 милиардов лет.", "В конце жизни Солнца внешняя оболочка будет сброшена, и от него останется постепенно остывающее ядро без источников энергии - белый карлик. Белый карлик - это конечная стадия эволюции  не слишком массивных звезд. Если звезда раз в десять тяжелее Солнца, то она превратится не в белого карлика. В конце ее жизни ядро потеряет устойчивость, и она как бы упадет сама на себя, произойдет взрыв сверхновой. Если мы говорим о звезде в 10, 20, может быть, в 30 раз больше солнечной, то после взрыва сверхновой останется нейтронная звезда - крайне интересный объект, очень компактный. Средняя плотность у нейтронной звезды чуть выше, чем у атомного ядра.", "Если нейтронная звезда излучает мощные периодические радиоимпульсы, то ее называют ", ". Если же существует тесная двойная система с нейтронной звездой, то вещество нормальной звезды может пертекать на компактный объект, будучи захваченным его гравитацией. Этот процесс называется аккрецией. В результате падения вещества на нейтронную звезду выделяется много энергии, и такая звезда излучает в основном в рентгеновском диапозоне, нызвают такую нейтронную звезду ", " ", ".", "Если нейтронная звезда обладает очень сильным магнитным полем, то это - ", ". Выделяют также радиотихие звезды в солнечных  окрестностях, назывемые Великолепной семеркой, центральные компактные объекты в остатках сверхновых, их известно около десятка. Они тоже радиотихие, как и Семерка, они испускают тепловое излучение, но они моложе, у них короче периоды вращения и меньше магнитные поля.", "Нейтронные звезды вращаются вокруг своей оси часто с большими скоростями, поэтому могут иметь очень короткий период вращения. В течение свой жизни нейтронная звезда может и замедлять свое вращение, и ускорять. Для ускорения необходимо какое-то внешнее воздействие, а замедление может происходить и без участия внешних объектов. Замедление вращения происходит примерно по одинаковому сценарию. Звезда излучает электромагнитные волны и ускоряет заряженные частицы. На это нужна энергия, которая берется из вращения, т.е. наша звезда будет замедляться. Энергия уносится потоком волн и частиц, по мере замедления вращения энергии будет излучаться все меньше.", "Магнитное поле порождается электрическими токами. И поля нейтронных звезд - не исключение. Поскольку они не подключены к розетке, и батареек в них нет, токи со временем должны уменьшаться, затухать. Соответсвтенно, будет уменьшаться и магнитное поле.", "Тепловая эволюция нейтронных звезд тоже интересна. Пока компактный объект молод, главным процессом в тепловой истории является остывание, у нейтронной звезды оно происходит причудливым образом, и все благодаря нейтрино. В начале своей жизни недра компактного объекта холоднее из-за того, что недра излучают нейтрино, которые очень эффективно уносят энергию. Эта стадия длится несколько десятков лет, пока температура внутри нейтронной звезды не выравнивается. Затем уже поверхность становится холоднее недр.", "Гравитационные волны - изменения гравитационного поля, распространяющиеся подобно волнам. Излучаются движущимися массами. Следовательно, когда вы махаете руками, то порождаете гравитационные волны, правда очень слабые. Чтобы зарегистрировать гравитационно-волновой сигнал  нужен гораздо более мощный источник. Источником такого сигнала могут быть сливающиеся нейтронные звезды или ", ".", "И хотя первая регистрация гравитационных волн была связана, похоже, со слиянием черных дыр, но в будущем мы, возможно, будем регистрировать гравитационные волны и от слияния нейтронных звезд. Сливающиеся нейтронные звезды - это естественный продукт эволюции массивных двойных. Расчеты показывают, что в галактике типа нашей слияния происходят раз в несколько десятков тысяч лет. Черные дыры сливаются друг с другом (или с нейтронными звездами) гораздо реже.", "Слияния нейтронных звезд - это прямо-таки золотой феномен: некоторые современные модели показывают, что большая часть золота во вселенной возникла имеено в этом процессе. Чтобы получить гравитационно-волновой всплеск большой мощности, потенциально детектируемый современными антеннами, надо начать с массивной двойной звезды. Звезды поочередно взрываются. Каждая порождает нейтронную звезду, и система при этом выживает. В конце концов эти нейтронные звезды сольются, потихонечку сближаясь из-за излучения гравитационных волн. Финальный аккорд - буквально падение нейтронной звезды на нейтронную звезду. Оно сопровождается выделением огромной энергии в виде гравитационных и элеткромагнитных волн.", "Физический эксперимент всегда ограничен: всегда есть какие-то предельные значения параметров, достижимые в конкретном эксперименте. Например, если вы изучаете гравитацию, то вы можете изучать силу тяжести в масштабе своей комнаты, далее - в масштабе Земли, запустить спутники на околоземную орбиту, потом - запустить спутники на орбиту в Солнечной системе. Но изучать законы гравитации в б", "льших вы не можете с помощью лаборатораных приборов, вам нужно обращаться к естественным процессам в природе. Это самое банальное - лаборатория просто кончилась. Эксперимент ограничен масштабом установки.", "Иногда нам не хватает каких-то мощностей, каких-то возможностей создать экстремальные параметры в лаборатории, и поэтому мы обращаемся к природным процессам. Чаще всего это процессы астрофизические. К примеру, инженеры и ученые 10-20-30 лет строили-строили и наконец построили какой-нибудь крупный ускоритель, научились ускорять частицы до больших энергий, но из космоса постоянно прилетают частицы с энергией в милиард раз больше, чем на БАКе. Прилетают каждый день, прилетают совершенно бесплатно, в принципе их тоже можно брать и изучать. И нейтронные звезды - это как раз такие уникальные, естественные лаборатории, где очень многие параматры - самые разные - доведены до предела.", "Нейтронные звезды позволяют объяснять новые загадочные явления. Например, несколько лет назад прибор ПАМЕЛА, работающий на российском спутнике Ресурс-Д, предназначенный для изучения космических лучей, обнаружил избыток позитронов. Была сразу высказана идея, что лишние позитроны могут рождаться в результате аннигиляции частиц темного вещества. Однако постепенно стало ясно, что у гипотезы с темным веществом в данном случае есть проблемы. Сейчас считается, что лучшим источником \"лишних\" позитронов могли бы быть близкие радиопульсары, испускающие ветер, содержащий много электрон-позитронных пар."], "date": ["19 ноября 2017 г.", "Недавно прочитал научно-популярную книгу про нейтронные звезды. Хочу рассказать о прочитанном. Называется книга \"", "\". Автор - Сергей Попов, доктор физико-математических наук, астрофизик и популяризатор науки, ведущий научный сотрудник института имени П.К. Штернберга (ГАИШ МГУ). Несколько лет проработал в европейских университетах и обсерваториях. Основная область его научных интересов - астрофизика нейтронных звезд.", "На ютубе можно найти много его лекций, например:", "Автор считает, что нейтронные звезды гораздо интереснее черных дыр. Это уникальные физические лаборатории по изучению экстремальных процессов и состояний. Недаром за изучение нейтронных звезд астрономы уже получили две Нобелевские премии, и дело этим явно не ограничится.", "В книге рассказывается, как с помощью различных телескопов - от радио до рентгеновских и гамма, - а также используя детекторы нейтрино и гравитационных волн, астрофизики исследуют эти суперобъекты, объединившие в себе всю современную физику. Мы сейчас описываем мир, пользуясь тремя фундаментальными теориями: Специальной теорией относительности, Общей теорией относительности и квантовой механикой.", "Есть известный рисунок - ", "-карта или \"куб теорий\", придуманный физиком Матвеем Бронштейном. На нем есть три координатные оси, одна из которых соответствует росту важности квантовых эффектов, другая - приближению к скорости света, а третья - увеличению гравитационного поля. Начало координат соотвествует классической механике. Переместившись в самую дальнюю от начала координат вершину куба, - столкнемся с процессами, требующими для своего описания так назвыаемой \"Теории всего\", которая объединит все известные взаимодействия.", "Если представить на этом рисунке место нейтронных звезд, то среди всех непосредственно наблюдаемых макроскопических объектов они окажутся самыми удаленными от начала координат. Для адекватного описания нейтронных звезд необходимы все три фундаментальных теории. Конечно, недра черных дыр должны быть еще экзотичнее, но их мы не можем наблюдать.", "Почему эти звезды называют нейтронными? Потому что они в основном состоят из нейтронов, условия в недрах этих звезд такие, что происходит нейтронизация - процесс множественного захвата электронов атомными ядрами. Протоны превращаются в нейтроны.", "Звезды рождаются и умирают. То, какой будет жизнь звезды зависит от ее массы. Легкие звезды живут очень долго и очень медленно пережигают водород в гелий. Поскольку Вселенной всего лишь 13 милиардов лет с небольшим, то даже самые первые из легких звезд (с массой раза в два меньше солнечной и более легкие) должны доживать до наших дней. Массивные звезды живут меньше просто потому, что они светят ярче и быстрее пережигают свой запас водорода, хотя его и больше, но светимость очень резко растет с ростом массы из-за роста температуры и плотности в центре. Если звезда имеет массу порядка солнечной, то она живет где-то 10-12 милиардов лет.", "В конце жизни Солнца внешняя оболочка будет сброшена, и от него останется постепенно остывающее ядро без источников энергии - белый карлик. Белый карлик - это конечная стадия эволюции  не слишком массивных звезд. Если звезда раз в десять тяжелее Солнца, то она превратится не в белого карлика. В конце ее жизни ядро потеряет устойчивость, и она как бы упадет сама на себя, произойдет взрыв сверхновой. Если мы говорим о звезде в 10, 20, может быть, в 30 раз больше солнечной, то после взрыва сверхновой останется нейтронная звезда - крайне интересный объект, очень компактный. Средняя плотность у нейтронной звезды чуть выше, чем у атомного ядра.", "Если нейтронная звезда излучает мощные периодические радиоимпульсы, то ее называют ", ". Если же существует тесная двойная система с нейтронной звездой, то вещество нормальной звезды может пертекать на компактный объект, будучи захваченным его гравитацией. Этот процесс называется аккрецией. В результате падения вещества на нейтронную звезду выделяется много энергии, и такая звезда излучает в основном в рентгеновском диапозоне, нызвают такую нейтронную звезду ", " ", ".", "Если нейтронная звезда обладает очень сильным магнитным полем, то это - ", ". Выделяют также радиотихие звезды в солнечных  окрестностях, назывемые Великолепной семеркой, центральные компактные объекты в остатках сверхновых, их известно около десятка. Они тоже радиотихие, как и Семерка, они испускают тепловое излучение, но они моложе, у них короче периоды вращения и меньше магнитные поля.", "Нейтронные звезды вращаются вокруг своей оси часто с большими скоростями, поэтому могут иметь очень короткий период вращения. В течение свой жизни нейтронная звезда может и замедлять свое вращение, и ускорять. Для ускорения необходимо какое-то внешнее воздействие, а замедление может происходить и без участия внешних объектов. Замедление вращения происходит примерно по одинаковому сценарию. Звезда излучает электромагнитные волны и ускоряет заряженные частицы. На это нужна энергия, которая берется из вращения, т.е. наша звезда будет замедляться. Энергия уносится потоком волн и частиц, по мере замедления вращения энергии будет излучаться все меньше.", "Магнитное поле порождается электрическими токами. И поля нейтронных звезд - не исключение. Поскольку они не подключены к розетке, и батареек в них нет, токи со временем должны уменьшаться, затухать. Соответсвтенно, будет уменьшаться и магнитное поле.", "Тепловая эволюция нейтронных звезд тоже интересна. Пока компактный объект молод, главным процессом в тепловой истории является остывание, у нейтронной звезды оно происходит причудливым образом, и все благодаря нейтрино. В начале своей жизни недра компактного объекта холоднее из-за того, что недра излучают нейтрино, которые очень эффективно уносят энергию. Эта стадия длится несколько десятков лет, пока температура внутри нейтронной звезды не выравнивается. Затем уже поверхность становится холоднее недр.", "Гравитационные волны - изменения гравитационного поля, распространяющиеся подобно волнам. Излучаются движущимися массами. Следовательно, когда вы махаете руками, то порождаете гравитационные волны, правда очень слабые. Чтобы зарегистрировать гравитационно-волновой сигнал  нужен гораздо более мощный источник. Источником такого сигнала могут быть сливающиеся нейтронные звезды или ", ".", "И хотя первая регистрация гравитационных волн была связана, похоже, со слиянием черных дыр, но в будущем мы, возможно, будем регистрировать гравитационные волны и от слияния нейтронных звезд. Сливающиеся нейтронные звезды - это естественный продукт эволюции массивных двойных. Расчеты показывают, что в галактике типа нашей слияния происходят раз в несколько десятков тысяч лет. Черные дыры сливаются друг с другом (или с нейтронными звездами) гораздо реже.", "Слияния нейтронных звезд - это прямо-таки золотой феномен: некоторые современные модели показывают, что большая часть золота во вселенной возникла имеено в этом процессе. Чтобы получить гравитационно-волновой всплеск большой мощности, потенциально детектируемый современными антеннами, надо начать с массивной двойной звезды. Звезды поочередно взрываются. Каждая порождает нейтронную звезду, и система при этом выживает. В конце концов эти нейтронные звезды сольются, потихонечку сближаясь из-за излучения гравитационных волн. Финальный аккорд - буквально падение нейтронной звезды на нейтронную звезду. Оно сопровождается выделением огромной энергии в виде гравитационных и элеткромагнитных волн.", "Физический эксперимент всегда ограничен: всегда есть какие-то предельные значения параметров, достижимые в конкретном эксперименте. Например, если вы изучаете гравитацию, то вы можете изучать силу тяжести в масштабе своей комнаты, далее - в масштабе Земли, запустить спутники на околоземную орбиту, потом - запустить спутники на орбиту в Солнечной системе. Но изучать законы гравитации в б", "льших вы не можете с помощью лаборатораных приборов, вам нужно обращаться к естественным процессам в природе. Это самое банальное - лаборатория просто кончилась. Эксперимент ограничен масштабом установки.", "Иногда нам не хватает каких-то мощностей, каких-то возможностей создать экстремальные параметры в лаборатории, и поэтому мы обращаемся к природным процессам. Чаще всего это процессы астрофизические. К примеру, инженеры и ученые 10-20-30 лет строили-строили и наконец построили какой-нибудь крупный ускоритель, научились ускорять частицы до больших энергий, но из космоса постоянно прилетают частицы с энергией в милиард раз больше, чем на БАКе. Прилетают каждый день, прилетают совершенно бесплатно, в принципе их тоже можно брать и изучать. И нейтронные звезды - это как раз такие уникальные, естественные лаборатории, где очень многие параматры - самые разные - доведены до предела.", "Нейтронные звезды позволяют объяснять новые загадочные явления. Например, несколько лет назад прибор ПАМЕЛА, работающий на российском спутнике Ресурс-Д, предназначенный для изучения космических лучей, обнаружил избыток позитронов. Была сразу высказана идея, что лишние позитроны могут рождаться в результате аннигиляции частиц темного вещества. Однако постепенно стало ясно, что у гипотезы с темным веществом в данном случае есть проблемы. Сейчас считается, что лучшим источником \"лишних\" позитронов могли бы быть близкие радиопульсары, испускающие ветер, содержащий много электрон-позитронных пар."]},
{"title": "======Немного об импортах в питоне", "body": ["Хотелось бы рассказать об одном моменте, связанном с системой импортов в питоне. Неподготовленному человеку может иногда показаться, что происходят нелогичные вещи, несоответствующие его ожиданиям. Так было со мной, когда я впервые столкнулся с данной проблемой.", "Допустим есть такой проект:", ":", ":", ":", ":", "Что будет если выполнить ", "? Сначала будет выведено начальное значение переменной. Затем будет вызвана функция ", ", которая поменяет ее значение, будет выведено новое значение, но что будет потом в функции ", "? Будет ли загружена заново переменная test_var? ", " выведет следующее:", "Можно было подумать (так было со мной), что последняя строчка будет другой - что там тоже должна быть выведена строка \"initial_value\", поскольку в модуле ", " вроде бы заново импортируется, но python кэширует импорты, поэтому значение переменной не обновляется, а остается такой же как и в функции ", ".", ":", ":", ":", "Во-первых, при присваивании нового значения переменной ", " в функции ", " создается новая переменная, во-вторых, после изменения в функции ", " та же самая переменная ", " задействована в функции ", ". Впрочем, такое поведение можно изменить, если принудительно перезагрузить ", ",", ":", "Если вы используете python3, то используйте следующий код для импорта ", ", потому что она была перемещена:", "python main.py:", "Теперь видно, что ", " был перезагружен в функции ", ", и теперь в ней после перезагрузки ", " используется изначальное значение переменной ", ".", "Для опытных разработчиков этот пост не представляет какой-либо ценности, но если вы новичок в питоне, то возможно вам было полезно узнать, что питон кэширует импорты, но это можно обойти, используя функцию ", "."], "date": ["12 ноября 2017 г.", "Хотелось бы рассказать об одном моменте, связанном с системой импортов в питоне. Неподготовленному человеку может иногда показаться, что происходят нелогичные вещи, несоответствующие его ожиданиям. Так было со мной, когда я впервые столкнулся с данной проблемой.", "Допустим есть такой проект:", ":", ":", ":", ":", "Что будет если выполнить ", "? Сначала будет выведено начальное значение переменной. Затем будет вызвана функция ", ", которая поменяет ее значение, будет выведено новое значение, но что будет потом в функции ", "? Будет ли загружена заново переменная test_var? ", " выведет следующее:", "Можно было подумать (так было со мной), что последняя строчка будет другой - что там тоже должна быть выведена строка \"initial_value\", поскольку в модуле ", " вроде бы заново импортируется, но python кэширует импорты, поэтому значение переменной не обновляется, а остается такой же как и в функции ", ".", ":", ":", ":", "Во-первых, при присваивании нового значения переменной ", " в функции ", " создается новая переменная, во-вторых, после изменения в функции ", " та же самая переменная ", " задействована в функции ", ". Впрочем, такое поведение можно изменить, если принудительно перезагрузить ", ",", ":", "Если вы используете python3, то используйте следующий код для импорта ", ", потому что она была перемещена:", "python main.py:", "Теперь видно, что ", " был перезагружен в функции ", ", и теперь в ней после перезагрузки ", " используется изначальное значение переменной ", ".", "Для опытных разработчиков этот пост не представляет какой-либо ценности, но если вы новичок в питоне, то возможно вам было полезно узнать, что питон кэширует импорты, но это можно обойти, используя функцию ", "."]},
{"title": "======Курс по комбинаторике", "body": ["Начал на днях проходить ", ". В этом посте буду отмечать основные моменты, которые я узнал в нем.", "Пусть дано множество $A\\left\\{a_1,...,a_n\\right\\}$ и множество $B\\left\\{b_1,...,b_m\\right\\}$, тогда количество способов, которыми можно отобрать объект либо из первого множества, либо из второго равно $n+m$.", "Пусть дано множество $A\\left\\{a_1,...,a_n\\right\\}$ и множество $B\\left\\{b_1,...,b_m\\right\\}$, тогда количество способов, которыми можно сначала извлечь объект из А, а затем вслед за ним извлечь произвольный объект из B равно $n\\cdot m$.", "Сколько существует шестизначных чисел? На первое место можно поставить одну из девяти цифр $\\left\\{1,2,3,4,5,6,7,8,9\\right\\}$, на оставшиеся места можно поставить любую из цифр $\\left\\{0,1,2,3,4,5,6,7,8,9\\right\\}$, по правилу умножения получаем $9\\cdot 10^5$.", "Пусть есть $n+1$ объектов и $n$ мест для их размещения, тогда найдется хотя бы одно место, в котором будет размещено хотя бы $2$ объекта.", "Пусть есть $20$ первокурсников и $1$ семинарист, надо посчитать количество рассадок в одном ряду, в котором $21$ место, причем семинарист должен сидеть с краю, а Петя, Коля и Вася не должны сидеть вместе.", "Семинарист должен сидеть по краям, поэтому есть $2$ варианта рассадки семинариста, общее количество рассадок первокурсников будет равно $20!$, потому что на первую позицию можно посадить $20$ студентов, на вторую $19$ и так далее, по правилу умножения получаем $20!$. Те ситуации, когда Петя, Коля и Вася сидят вместе можно посчитать, считая Петю, Колю и Васю за одного человека, тогда получается, что надо умножить количество рассадок $18$ человек ($18!$) на количество рассадок Пети, Коли и Васи, когда они вместе ($3!$). Таким образом ответ:", "$$2\\cdot(20! - 18!\\cdot3!)$$", "Пусть дано множество $A\\left\\{a_1,...,a_n\\right\\}$, если мы отбираем из него элементы с учетом места каждого элемента, то это - ", ", а если без учета мест - ", ". Например, есть множество букв $\\left\\{а,...,я\\right\\}$, тогда слово \"лягушка\" - это размещение, слово \"гуляшка\" - другое размещение. Но сочетание $\\left\\{л,я,г,у,ш,к,а\\right\\}$ это то же самое сочетание что и $\\left\\{г,у,л,я,ш,к,а\\right\\}$, потому что в сочетании не важно расположение элементов.", "Также могут быть сочетания с повторениями и без, так и размещения с повторениями и без. Например, слово \"жаба\" - это размещение с повторениями, а множество $\\left\\{ж,а,б,а\\right\\}$ - это сочетание с повторениями.", "$\\bar{A_n^k}$ - число $k$ - размещений с повторениями", "$A_n^k$ - число $k$ - размещений без повторений", "$C_n^k$ - число $k$ - сочетаний без повторений", "$\\bar{С}_n^k$ - число $k$ - сочетаний с повторениями", " $$\\bar{A_n^k}=n^k$$", "На первую позицию можно поставить $n$ объектов, на вторую тоже $n$ и т.д., получаем $n\\cdot n\\cdot ...\\cdot n=n^k$", " $$A_n^k=n\\cdot (n-1)\\cdot (n-2)\\cdot ...\\cdot(n-k+1)=\\frac{n!}{(n-k)!}$$", "На первую позицию можно поставить $n$ объектов, на вторую $n-1$ и т.д., на $k-ю$ $n-k+1$", "Если взять $A_n^n$, то получится $A_n^n=n!$ - это количество перестановок", " $$С_n^k=\\frac{A_n^k}{k!}=\\frac{n!}{k!(n-k)!}$$", "$k$ - сочетанию без повторений соответствует $k!$ его перестановок, являющихся $k$ - размещениями. Сочетаний без повторений в $k!$ раз меньше, чем размещений без повторений.", " $$\\bar{С}_n^k=C_{n+k-1}^k$$", "Построим биекцию между $k$-сочетаниями с повторением из множества $\\left\\{a_1,...,a_n\\right\\}$ и последовательностями из $0$ и $1$ специального вида.", "Рассмотрим произвольное $k$-сочетание с повторениями. Посчитаем, сколько раз в этом $k$-сочетании встречается $a_1$ (это может случиться от $0$ до $k$ раз), и рисуем такое количество $1$. Если не встречается, то ничего не пишем.", "После этого пишем $0$, и пишем столько $1$, сколько раз в $k$-сочетании встречается $a_2$, и т.д. В последнюю очередь пишем столько единиц, сколько раз встречается $a_n$.", "В итоге мы получаем последовательность длины $n+k−1$ из $0$ и $1$, в которой ровно $n−1$ нулей и ровно $k$ единиц.", "Легко показать, что по любой такой последовательности можно восстановить $k$-сочетание. Таким образом, мы получаем биекцию между $k$-сочетаниями с повторениями и такими последовательностями из $0$ и $1$. Их количество равно способу выбрать $k$ единиц на $n+k−1$ позиции, то есть $C_{n+k−1}^k$.", "Пусть у нас есть 10 разных элементов, и мы 3 раза выбраем 2 случайных элемента. Какова вероятность, что все 3 раза мы отбирем уникальные элементы? Тоесть какова вероятность, что выбранные элементы не повторятся?", "Сначала давайте попробуем смоделировать ситуацию на питоне:", "Данный код дает вероятность уникальных элементов в районе 20%. Теперь применим формулу комбинаторики, и посмотрим, получится ли такой же результат. Ясно, что при первой выборке вероятность уникальных элементов 100%. При второй выборке количество уникальных исходов уменьшится на $9+8$ - то есть на количество тех вариантов, в которых задействованы элементы, выбранные при первой выборке, при третьей выборке количество уникальных выборок уменьшится на $9+8+7+6$. Общее количество сочетаний при каждой выборке - это $C_{10}^2$. Получаем искомую вероятность уникальных элементов во всех 3 случаях:", "$$1\\cdot \\frac{C_{10}^2-(9+8)}{C_{10}^2}\\cdot \\frac{C_{10}^2-(9+8+7+6)}{C_{10}^2}=\\frac{28}{45}\\cdot \\frac{15}{45}=0.207$$", "Теория сошлась с экспериментом!", "В ящике лежат семь белых, пять красных и три черных носка. Носки считаются парой, если они имеют один цвет. Наугад из ящика выбирается четыре произвольных носка. Найдите вероятность того, что среди выбранных встретятся две пары разных цветов.", "Сначала давайте попробуем смоделировать ситуацию на питоне:", "Этот код дает вероятность того, что среди выбранных 4 носков будут 2 пары примерно 0.22. Давайте проверим это, найдя аналитическое решение.", "Всего возможных исходов будет $C_{15}^4$, потому что мы отбираем 4 носка, а всего их 15. Это пойдет в знаменатель, теперь нужно подсчитать количество вариантов выбрать 2 белых 2 красных, 2 белых 2 черных, 2 красных 2 черных. То есть:", "$$P=\\frac{C_{7}^{2}\\cdot C_{5}^{2}+C_{7}^{2}\\cdot C_{3}^{2}+C_{5}^{2}\\cdot C_{3}^{2}}{C_{15}^{4}}=0.2219$$", "Теория снова сошлась с экспериментом, это прекрасно!", "$$(x+y)^n=\\sum_{k=0}^nC^k_nx^ky^{n-k}$$", "Числа сочетаний также выступают в роли биномиальных коэффициентов.", "Вопрос. Есть $n_1$ символов $a_1$, $n_2$ символов $a_2$, …, $n_k$ символов $a_k$. Пусть $n=n_1+…+n_k$ − общее количество символов. Сколько можно составить различных слов длины $n$ из такого набора символов?", "Теорема. Обозначим через $P(n_1,…,n_k)$ искомое количество слов длины $n$. Тогда $P(n_1,\\ldots,n_k) = \\frac{n!}{n_1!\\cdot n_2! \\ldots n_k!}$.", "Мы хотим найти ", ", то есть формулу для нахождения $(x_1+\\ldots+x_k)^n$. Ясно, что полиномиальная формула является обобщением биномиальной.", "$$(x_1+\\ldots+x_k)^n = \\sum_{(n_1,\\ldots,n_k): \\forall i \\; n_i \\in \\{0,1,\\ldots,n\\}, n_1+\\ldots+n_k=n}P(n_1,\\ldots,n_k) \\cdot x_1^{n_1} \\cdot x_2^{n_2} \\cdot \\ldots \\cdot x_k^{n_k}$$", "Пусть $\\alpha_1,\\ldots,\\alpha_N$ − объекты, объекты, $\\alpha_1,\\ldots,\\alpha_n$ − свойства, присущие указанным объектам.", "Пример: $\\alpha_1,\\ldots,\\alpha_N$ − люди в аудитории, свойства − любые, например, свойство \"хорошо знать комбинаторику\" или \"знание иностранных языков\" или более экзотические.", "Выделим следующие свойства: $\\alpha_1$ − \"знание английского языка\", $\\alpha_2$ − \"знание французского языка\", $\\alpha_3$ − \"знание немецкого языка\". Обозначим через $N(\\alpha_1)$ количество объектов среди исходных, которые обладают свойством $\\alpha_1$, через $N(\\alpha_2)$ − количество объектов среди исходных, которые обладают свойством $\\alpha_2$, и так далее, через $N(\\alpha_n)$ − количество объектов среди исходных, которые обладают свойством $\\alpha_n$.", "По аналогии, через $N(\\alpha_1,\\alpha_2)$ обозначим количество объектов, которые обладают свойством $\\alpha_1$ и свойством $\\alpha_2$, …, через $N(\\alpha_{n−1},\\alpha_n)$ обозначим количество объектов, которые обладают свойством $\\alpha_{n−1}$ и свойством $\\alpha_n$. Всего таких пар свойств будет ровно $C^2_n$.", "Аналогично определяем количества $N(\\alpha_{n-2},\\alpha_{n-1},\\alpha_n)$, $\\ldots$. Последним будет определено $N(\\alpha_1,\\alpha_2, \\ldots,\\alpha_n)$ − количество объектов, которые обладают всеми свойствами $\\alpha_1, \\alpha_2,\\ldots,\\alpha_n$.", "Кроме того, через $\\alpha_i'$ обозначим отрицание к свойству $\\alpha_i$, то есть этим свойством обладают объекты, для которых не выполнено свойство $\\alpha_i$. Наша цель − найти количество людей, для которых не выполнено ни одно из свойств $\\alpha_1,\\alpha_2,\\ldots,\\alpha_n$. Пример: в случае трёх множеств получаем формулу:", "$$N(\\alpha_1',\\ldots,\\alpha_3') = N - N(\\alpha_1) - N(\\alpha_2) - N(\\alpha_3) + N(\\alpha_1,\\alpha_2) + N(\\alpha_1,\\alpha_3) + N(\\alpha_2,\\alpha_3) - N(\\alpha_1,\\alpha_2,\\alpha_3)$$", "$$N(\\alpha_1',\\ldots,\\alpha_n') = N - N(\\alpha_1) - N(\\alpha_2) - \\ldots - N(\\alpha_n) + N(\\alpha_1,\\alpha_2) + \\ldots + N(\\alpha_{n-1},\\alpha_n)-N(\\alpha_1,\\alpha_2,\\alpha_3) - \\ldots - N(\\alpha_{n-2},\\alpha_{n-1},\\alpha_n) + \\ldots + (-1)^nN(\\alpha_1,\\alpha_2,\\ldots,\\alpha_n)$$"], "date": ["10 декабря 2017 г.", "Начал на днях проходить ", ". В этом посте буду отмечать основные моменты, которые я узнал в нем.", "Пусть дано множество $A\\left\\{a_1,...,a_n\\right\\}$ и множество $B\\left\\{b_1,...,b_m\\right\\}$, тогда количество способов, которыми можно отобрать объект либо из первого множества, либо из второго равно $n+m$.", "Пусть дано множество $A\\left\\{a_1,...,a_n\\right\\}$ и множество $B\\left\\{b_1,...,b_m\\right\\}$, тогда количество способов, которыми можно сначала извлечь объект из А, а затем вслед за ним извлечь произвольный объект из B равно $n\\cdot m$.", "Сколько существует шестизначных чисел? На первое место можно поставить одну из девяти цифр $\\left\\{1,2,3,4,5,6,7,8,9\\right\\}$, на оставшиеся места можно поставить любую из цифр $\\left\\{0,1,2,3,4,5,6,7,8,9\\right\\}$, по правилу умножения получаем $9\\cdot 10^5$.", "Пусть есть $n+1$ объектов и $n$ мест для их размещения, тогда найдется хотя бы одно место, в котором будет размещено хотя бы $2$ объекта.", "Пусть есть $20$ первокурсников и $1$ семинарист, надо посчитать количество рассадок в одном ряду, в котором $21$ место, причем семинарист должен сидеть с краю, а Петя, Коля и Вася не должны сидеть вместе.", "Семинарист должен сидеть по краям, поэтому есть $2$ варианта рассадки семинариста, общее количество рассадок первокурсников будет равно $20!$, потому что на первую позицию можно посадить $20$ студентов, на вторую $19$ и так далее, по правилу умножения получаем $20!$. Те ситуации, когда Петя, Коля и Вася сидят вместе можно посчитать, считая Петю, Колю и Васю за одного человека, тогда получается, что надо умножить количество рассадок $18$ человек ($18!$) на количество рассадок Пети, Коли и Васи, когда они вместе ($3!$). Таким образом ответ:", "$$2\\cdot(20! - 18!\\cdot3!)$$", "Пусть дано множество $A\\left\\{a_1,...,a_n\\right\\}$, если мы отбираем из него элементы с учетом места каждого элемента, то это - ", ", а если без учета мест - ", ". Например, есть множество букв $\\left\\{а,...,я\\right\\}$, тогда слово \"лягушка\" - это размещение, слово \"гуляшка\" - другое размещение. Но сочетание $\\left\\{л,я,г,у,ш,к,а\\right\\}$ это то же самое сочетание что и $\\left\\{г,у,л,я,ш,к,а\\right\\}$, потому что в сочетании не важно расположение элементов.", "Также могут быть сочетания с повторениями и без, так и размещения с повторениями и без. Например, слово \"жаба\" - это размещение с повторениями, а множество $\\left\\{ж,а,б,а\\right\\}$ - это сочетание с повторениями.", "$\\bar{A_n^k}$ - число $k$ - размещений с повторениями", "$A_n^k$ - число $k$ - размещений без повторений", "$C_n^k$ - число $k$ - сочетаний без повторений", "$\\bar{С}_n^k$ - число $k$ - сочетаний с повторениями", " $$\\bar{A_n^k}=n^k$$", "На первую позицию можно поставить $n$ объектов, на вторую тоже $n$ и т.д., получаем $n\\cdot n\\cdot ...\\cdot n=n^k$", " $$A_n^k=n\\cdot (n-1)\\cdot (n-2)\\cdot ...\\cdot(n-k+1)=\\frac{n!}{(n-k)!}$$", "На первую позицию можно поставить $n$ объектов, на вторую $n-1$ и т.д., на $k-ю$ $n-k+1$", "Если взять $A_n^n$, то получится $A_n^n=n!$ - это количество перестановок", " $$С_n^k=\\frac{A_n^k}{k!}=\\frac{n!}{k!(n-k)!}$$", "$k$ - сочетанию без повторений соответствует $k!$ его перестановок, являющихся $k$ - размещениями. Сочетаний без повторений в $k!$ раз меньше, чем размещений без повторений.", " $$\\bar{С}_n^k=C_{n+k-1}^k$$", "Построим биекцию между $k$-сочетаниями с повторением из множества $\\left\\{a_1,...,a_n\\right\\}$ и последовательностями из $0$ и $1$ специального вида.", "Рассмотрим произвольное $k$-сочетание с повторениями. Посчитаем, сколько раз в этом $k$-сочетании встречается $a_1$ (это может случиться от $0$ до $k$ раз), и рисуем такое количество $1$. Если не встречается, то ничего не пишем.", "После этого пишем $0$, и пишем столько $1$, сколько раз в $k$-сочетании встречается $a_2$, и т.д. В последнюю очередь пишем столько единиц, сколько раз встречается $a_n$.", "В итоге мы получаем последовательность длины $n+k−1$ из $0$ и $1$, в которой ровно $n−1$ нулей и ровно $k$ единиц.", "Легко показать, что по любой такой последовательности можно восстановить $k$-сочетание. Таким образом, мы получаем биекцию между $k$-сочетаниями с повторениями и такими последовательностями из $0$ и $1$. Их количество равно способу выбрать $k$ единиц на $n+k−1$ позиции, то есть $C_{n+k−1}^k$.", "Пусть у нас есть 10 разных элементов, и мы 3 раза выбраем 2 случайных элемента. Какова вероятность, что все 3 раза мы отбирем уникальные элементы? Тоесть какова вероятность, что выбранные элементы не повторятся?", "Сначала давайте попробуем смоделировать ситуацию на питоне:", "Данный код дает вероятность уникальных элементов в районе 20%. Теперь применим формулу комбинаторики, и посмотрим, получится ли такой же результат. Ясно, что при первой выборке вероятность уникальных элементов 100%. При второй выборке количество уникальных исходов уменьшится на $9+8$ - то есть на количество тех вариантов, в которых задействованы элементы, выбранные при первой выборке, при третьей выборке количество уникальных выборок уменьшится на $9+8+7+6$. Общее количество сочетаний при каждой выборке - это $C_{10}^2$. Получаем искомую вероятность уникальных элементов во всех 3 случаях:", "$$1\\cdot \\frac{C_{10}^2-(9+8)}{C_{10}^2}\\cdot \\frac{C_{10}^2-(9+8+7+6)}{C_{10}^2}=\\frac{28}{45}\\cdot \\frac{15}{45}=0.207$$", "Теория сошлась с экспериментом!", "В ящике лежат семь белых, пять красных и три черных носка. Носки считаются парой, если они имеют один цвет. Наугад из ящика выбирается четыре произвольных носка. Найдите вероятность того, что среди выбранных встретятся две пары разных цветов.", "Сначала давайте попробуем смоделировать ситуацию на питоне:", "Этот код дает вероятность того, что среди выбранных 4 носков будут 2 пары примерно 0.22. Давайте проверим это, найдя аналитическое решение.", "Всего возможных исходов будет $C_{15}^4$, потому что мы отбираем 4 носка, а всего их 15. Это пойдет в знаменатель, теперь нужно подсчитать количество вариантов выбрать 2 белых 2 красных, 2 белых 2 черных, 2 красных 2 черных. То есть:", "$$P=\\frac{C_{7}^{2}\\cdot C_{5}^{2}+C_{7}^{2}\\cdot C_{3}^{2}+C_{5}^{2}\\cdot C_{3}^{2}}{C_{15}^{4}}=0.2219$$", "Теория снова сошлась с экспериментом, это прекрасно!", "$$(x+y)^n=\\sum_{k=0}^nC^k_nx^ky^{n-k}$$", "Числа сочетаний также выступают в роли биномиальных коэффициентов.", "Вопрос. Есть $n_1$ символов $a_1$, $n_2$ символов $a_2$, …, $n_k$ символов $a_k$. Пусть $n=n_1+…+n_k$ − общее количество символов. Сколько можно составить различных слов длины $n$ из такого набора символов?", "Теорема. Обозначим через $P(n_1,…,n_k)$ искомое количество слов длины $n$. Тогда $P(n_1,\\ldots,n_k) = \\frac{n!}{n_1!\\cdot n_2! \\ldots n_k!}$.", "Мы хотим найти ", ", то есть формулу для нахождения $(x_1+\\ldots+x_k)^n$. Ясно, что полиномиальная формула является обобщением биномиальной.", "$$(x_1+\\ldots+x_k)^n = \\sum_{(n_1,\\ldots,n_k): \\forall i \\; n_i \\in \\{0,1,\\ldots,n\\}, n_1+\\ldots+n_k=n}P(n_1,\\ldots,n_k) \\cdot x_1^{n_1} \\cdot x_2^{n_2} \\cdot \\ldots \\cdot x_k^{n_k}$$", "Пусть $\\alpha_1,\\ldots,\\alpha_N$ − объекты, объекты, $\\alpha_1,\\ldots,\\alpha_n$ − свойства, присущие указанным объектам.", "Пример: $\\alpha_1,\\ldots,\\alpha_N$ − люди в аудитории, свойства − любые, например, свойство \"хорошо знать комбинаторику\" или \"знание иностранных языков\" или более экзотические.", "Выделим следующие свойства: $\\alpha_1$ − \"знание английского языка\", $\\alpha_2$ − \"знание французского языка\", $\\alpha_3$ − \"знание немецкого языка\". Обозначим через $N(\\alpha_1)$ количество объектов среди исходных, которые обладают свойством $\\alpha_1$, через $N(\\alpha_2)$ − количество объектов среди исходных, которые обладают свойством $\\alpha_2$, и так далее, через $N(\\alpha_n)$ − количество объектов среди исходных, которые обладают свойством $\\alpha_n$.", "По аналогии, через $N(\\alpha_1,\\alpha_2)$ обозначим количество объектов, которые обладают свойством $\\alpha_1$ и свойством $\\alpha_2$, …, через $N(\\alpha_{n−1},\\alpha_n)$ обозначим количество объектов, которые обладают свойством $\\alpha_{n−1}$ и свойством $\\alpha_n$. Всего таких пар свойств будет ровно $C^2_n$.", "Аналогично определяем количества $N(\\alpha_{n-2},\\alpha_{n-1},\\alpha_n)$, $\\ldots$. Последним будет определено $N(\\alpha_1,\\alpha_2, \\ldots,\\alpha_n)$ − количество объектов, которые обладают всеми свойствами $\\alpha_1, \\alpha_2,\\ldots,\\alpha_n$.", "Кроме того, через $\\alpha_i'$ обозначим отрицание к свойству $\\alpha_i$, то есть этим свойством обладают объекты, для которых не выполнено свойство $\\alpha_i$. Наша цель − найти количество людей, для которых не выполнено ни одно из свойств $\\alpha_1,\\alpha_2,\\ldots,\\alpha_n$. Пример: в случае трёх множеств получаем формулу:", "$$N(\\alpha_1',\\ldots,\\alpha_3') = N - N(\\alpha_1) - N(\\alpha_2) - N(\\alpha_3) + N(\\alpha_1,\\alpha_2) + N(\\alpha_1,\\alpha_3) + N(\\alpha_2,\\alpha_3) - N(\\alpha_1,\\alpha_2,\\alpha_3)$$", "$$N(\\alpha_1',\\ldots,\\alpha_n') = N - N(\\alpha_1) - N(\\alpha_2) - \\ldots - N(\\alpha_n) + N(\\alpha_1,\\alpha_2) + \\ldots + N(\\alpha_{n-1},\\alpha_n)-N(\\alpha_1,\\alpha_2,\\alpha_3) - \\ldots - N(\\alpha_{n-2},\\alpha_{n-1},\\alpha_n) + \\ldots + (-1)^nN(\\alpha_1,\\alpha_2,\\ldots,\\alpha_n)$$"]},
{"title": "======Пишем простой парсер на Scrapy", "body": ["У меня есть некоторый опыт работы на ", ". Одна из часто встречающихся там задач - парсинг каких-либо сайтов. Для этой цели удобно исрользовать фреймворк ", ". Этот open source'ный фреймворк построен на базе асинхронной библиотеки ", ", поэтому он сам асинхронный, это значит, что можно отсылать реквесты, не дожидаясь ответа сервера на предыдущие запросы, что существенно ускоряет парсинг, если сравнивать с синхронным подходом.", "Установить Scrapy можно через pip:", "Для примера я напишу парсер своего же блога. Сначала необходимо создать проект:", "Spider'ы - это классы, которые вы определяете, а ", " использует для извлечения данных с сайта. Эти классы должны наследоваться от ", ", в них должны быть описаны начальные запросы, как идти по ссылкам на страницах и какую информацию извлекать со страниц.", "На строке 7 задается важный параметр - название spider'a, по этому названию spider будет запускаться. Атрибут класса ", "- это список url'ов, которые будут использованы для начальных реквестов. Для заданного url'a будет вызван метод ", ", в котором мы получаем все ссылки на конкретные посты на главной странице. ", "- это язык для  выбора опреденных элементов из html - кода. На строках 13, 14 я отбираю div'ы, имеющие классы ", " и ", ", затем беру ссылки из ", " - элементов внутри div'ов.", "Запустить этот spider вы можете следующей командой из корня проекта:", "Если вы запустите этот спайдер, то увидите ссылки на конкретные посты, но не на все, а только на посты с главной страницы, чтобы пройтись по всем страницам и получить ссылки на все посты нужно изменить код нашего паука:", "На строке 9 я изменил стартовый урл, чтобы спайдер не заходил дважды на первую страницу. На строке 11 я добавил атрибут класса ", ", где хранятся уже посещенные страницы, это необходимо сделать, иначе спайдер может несколько раз зайти на одну страницу. На строках 21-27 я ищу ссылку на следующую страничку, и для этой следующей странички рекурсивно вызываю функцию ", ". Эта ссылка должна иметь класс ", " и не иметь класс ", "(этот класс - индикатор текущей страницы).", "Мне нужен только ", " и ", "и ", " у каждого поста. Далее небходимо не просто принтить ссылки на посты, но и переходить по ним, парсить их, поэтому нужно добавить вызов еще одной функции, которая будет отвечать за парсинг поста:", "Добавил функцию ", ", в ней я парсю старницы постов. Запустить парсер с генерацией csv можно так:", "Если вам нужен json на выходе, то:", "При проблеме с кодировкой установите настройку FEED_EXPORT_ENCODING в settings.py:"], "date": ["3 декабря 2017 г.", "У меня есть некоторый опыт работы на ", ". Одна из часто встречающихся там задач - парсинг каких-либо сайтов. Для этой цели удобно исрользовать фреймворк ", ". Этот open source'ный фреймворк построен на базе асинхронной библиотеки ", ", поэтому он сам асинхронный, это значит, что можно отсылать реквесты, не дожидаясь ответа сервера на предыдущие запросы, что существенно ускоряет парсинг, если сравнивать с синхронным подходом.", "Установить Scrapy можно через pip:", "Для примера я напишу парсер своего же блога. Сначала необходимо создать проект:", ", где ", " - название проекта.", "Эта команда создаст папку ", " следующего вида:", "Spider'ы - это классы, которые вы определяете, а ", " использует для извлечения данных с сайта. Эти классы должны наследоваться от ", ", в них должны быть описаны начальные запросы, как идти по ссылкам на страницах и какую информацию извлекать со страниц.", "Cоздадим файлик ", " в папке ", " следующего содержания:", "На строке 7 задается важный параметр - название spider'a, по этому названию spider будет запускаться. Атрибут класса ", "- это список url'ов, которые будут использованы для начальных реквестов. Для заданного url'a будет вызван метод ", ", в котором мы получаем все ссылки на конкретные посты на главной странице. ", "- это язык для  выбора опреденных элементов из html - кода. На строках 13, 14 я отбираю div'ы, имеющие классы ", " и ", ", затем беру ссылки из ", " - элементов внутри div'ов.", "Запустить этот spider вы можете следующей командой из корня проекта:", "Если вы запустите этот спайдер, то увидите ссылки на конкретные посты, но не на все, а только на посты с главной страницы, чтобы пройтись по всем страницам и получить ссылки на все посты нужно изменить код нашего паука:", "На строке 9 я изменил стартовый урл, чтобы спайдер не заходил дважды на первую страницу. На строке 11 я добавил атрибут класса ", ", где хранятся уже посещенные страницы, это необходимо сделать, иначе спайдер может несколько раз зайти на одну страницу. На строках 21-27 я ищу ссылку на следующую страничку, и для этой следующей странички рекурсивно вызываю функцию ", ". Эта ссылка должна иметь класс ", " и не иметь класс ", "(этот класс - индикатор текущей страницы).", "Далее так отредактируем файлик ", ":", "Мне нужен только ", " и ", "и ", " у каждого поста. Далее небходимо не просто принтить ссылки на посты, но и переходить по ним, парсить их, поэтому нужно добавить вызов еще одной функции, которая будет отвечать за парсинг поста:", "Добавил функцию ", ", в ней я парсю старницы постов. Запустить парсер с генерацией csv можно так:", "Если все нормально, то в корне проекта будет создан файл ", "Если вам нужен json на выходе, то:", "При проблеме с кодировкой установите настройку FEED_EXPORT_ENCODING в settings.py:"]},
{"title": "======Пишем змейку на pygame", "body": ["Есть такая библиотека для разработки двухмерных игр - ", ". Недавно я прошел курс на образовательном сайте ", " - ", ". Этот курс посвещен созданию классической змейки на pygame. Хотел бы поделиться получившейся игрой. Весь код в данном посте я взял из данного курса, правда изрядно его изменил, в частности добавил использование классов. Также я внес несколько исправлений.", "Установить Pygame можно через pip:", "Начнем с импортов:", "Будем использовать собственно ", ", ", " ради функции ", " - чтобы завершать скрипт при ошибке или game over'e, ", " - ради функции ", ", чтобы размещать еду в случайных местах и ", " - ради функции ", ", чтобы экран игры немного задержался при game over'e.", "Я разбил игру на 3 класса: ", " - в котором находятся настройки игры, методы для инициализации, завершения игры, отрбражения результата, ", " - здесь параметры отвечающие за позицию головы змеи, координаты тела змеи, метод, который обеспечивает изменения тела (добавления и убирания сегментов) и ", " - параметр положения еды, метод отображения еды.", "Класс Game:", "Я добавил побольше комментариев, чтобы объяснить код. На строке 25 в переменной ", " будет кортеж вида (6, 0) - (количество завершенных тасков, количество ошибок), поэтому на строке 26 берется второй элемент кортежа и проверяется на количество ошибок. В функции ", " и в фукции ", " я сначала убиваю окно pygame функцией quit(), а затем уже выхожу из скрипта sys.exit'ом. В функции ", " переменная ", " нужна чтобы определить как выводить результат - слева сверху в течение игры (стр. 72) или по центру в момент завершения (стр. 76).", "Далее идет класс Snake:", "В конструкторе класса стр.2-стр.7 задаются две переменные, отвечающие за положение змеи (головы и сегментов). В функции ", " направление движения змеи изменяется только тогда, когда игрок не нажал противоположное направление - так нельзя делать в классической змейке, поворачивать можно только под прямым углом. В функции ", ", в которой описан механизм изменения тела змеи, есть важный момент - в строке 42 обязательно создавать новый список (делать ", "), иначе (если сделать просто ", " ) будет передан не новый список, а тот же самый список ", " и через несколько итераций мы будем управлять одной точкой, после чего игра завершится game_over'ом, предлагаю вам проверить это самим и подумать почему так получается.", "Позиция еды на строке 48 задается таким образом, чтобы x и y еды были всегда кратны 10, чтобы всегда была возможность ее захватить. Начало координат находится в левом верхнем углу, причем ось x напрвлено вправо, а ось y - вниз, поэтому на строках 28, 30, 32 и 34 координаты изменяются соответствующим образом. ", "Класс Food:", "Тут все понятно, единственное, в методе ", " используется метод ", ", который принимает 3 аргумента: поверхность, цвет и объект, в данном случае ", ".", "Далее создаем классы и инициализиурем Pygame:", "Далее запускаем бесконечный цикл, в котором последовательно вызыаем описанные методы классов с соответствующими параметрами:", "Итого получилось:", "Данную игру можно улучшить, добавив изображения, музыку, еще ей не хватает настроек и меню, а также настроек сложности. Если вы хотите поделиться ею с друзьями, то, возможно, вы захотите скомпилировать ее в exe. Для этой цели можно использовать, например, pyinstaller:", "После чего в папке ", " будет лежать бинарник.", "Я сделал видео моей попытки поиграть:"], "date": ["26 ноября 2017 г.", "Есть такая библиотека для разработки двухмерных игр - ", ". Недавно я прошел курс на образовательном сайте ", " - ", ". Этот курс посвещен созданию классической змейки на pygame. Хотел бы поделиться получившейся игрой. Весь код в данном посте я взял из данного курса, правда изрядно его изменил, в частности добавил использование классов. Также я внес несколько исправлений.", "Установить Pygame можно через pip:", "Начнем с импортов:", "Будем использовать собственно ", ", ", " ради функции ", " - чтобы завершать скрипт при ошибке или game over'e, ", " - ради функции ", ", чтобы размещать еду в случайных местах и ", " - ради функции ", ", чтобы экран игры немного задержался при game over'e.", "Я разбил игру на 3 класса: ", " - в котором находятся настройки игры, методы для инициализации, завершения игры, отрбражения результата, ", " - здесь параметры отвечающие за позицию головы змеи, координаты тела змеи, метод, который обеспечивает изменения тела (добавления и убирания сегментов) и ", " - параметр положения еды, метод отображения еды.", "Класс Game:", "Я добавил побольше комментариев, чтобы объяснить код. На строке 25 в переменной ", " будет кортеж вида (6, 0) - (количество завершенных тасков, количество ошибок), поэтому на строке 26 берется второй элемент кортежа и проверяется на количество ошибок. В функции ", " и в фукции ", " я сначала убиваю окно pygame функцией quit(), а затем уже выхожу из скрипта sys.exit'ом. В функции ", " переменная ", " нужна чтобы определить как выводить результат - слева сверху в течение игры (стр. 72) или по центру в момент завершения (стр. 76).", "Далее идет класс Snake:", "В конструкторе класса стр.2-стр.7 задаются две переменные, отвечающие за положение змеи (головы и сегментов). В функции ", " направление движения змеи изменяется только тогда, когда игрок не нажал противоположное направление - так нельзя делать в классической змейке, поворачивать можно только под прямым углом. В функции ", ", в которой описан механизм изменения тела змеи, есть важный момент - в строке 42 обязательно создавать новый список (делать ", "), иначе (если сделать просто ", " ) будет передан не новый список, а тот же самый список ", " и через несколько итераций мы будем управлять одной точкой, после чего игра завершится game_over'ом, предлагаю вам проверить это самим и подумать почему так получается.", "Позиция еды на строке 48 задается таким образом, чтобы x и y еды были всегда кратны 10, чтобы всегда была возможность ее захватить. Начало координат находится в левом верхнем углу, причем ось x напрвлено вправо, а ось y - вниз, поэтому на строках 28, 30, 32 и 34 координаты изменяются соответствующим образом. ", "Класс Food:", "Тут все понятно, единственное, в методе ", " используется метод ", ", который принимает 3 аргумента: поверхность, цвет и объект, в данном случае ", ".", "Далее создаем классы и инициализиурем Pygame:", "Далее запускаем бесконечный цикл, в котором последовательно вызыаем описанные методы классов с соответствующими параметрами:", "Итого получилось:", "Данную игру можно улучшить, добавив изображения, музыку, еще ей не хватает настроек и меню, а также настроек сложности. Если вы хотите поделиться ею с друзьями, то, возможно, вы захотите скомпилировать ее в exe. Для этой цели можно использовать, например, pyinstaller:", "После чего в папке ", " будет лежать бинарник.", "Я сделал видео моей попытки поиграть:"]},
{"title": "======Про lumosity", "body": ["Есть такой сайт - ", ", там много игр направленных на развитие интеллекта, у меня есть некоторый опыт игры на этом сайте, хотел бы им поделиться. Если честно, то я сомневаюсь, что игра в подобные игры может сделать вас умнее, скорее всего, играя в эти игры вы просто станете лучше в них играть. Тем не менее, играть в них просто весело и, если вам, например, нечем заняться в метро, то почему бы и нет? Правда, это небесплатно, если вы хотите играть в официальную версию.", "Всего там около пятидесяти игр, разбитых на следующие категорий:", "Вот мои любимые игры из этих категорий:", "Highway Hazards", "Здесь мы управляем картом, который, все время ускоряясь, едет по трехполосному шоссе, при этом вам надо постоянно маневрировать, объезжая различные препятствия. Сложность в том, что при наборе определнной скорости вы будете не успевать их объезжать. Цель игры - набрать максимальную скорость, держать ее максимальное время и избегать столкновений. Игра предупреждает о препятствиях:", "Speed Pack", "Игра направленная как на развитие скорости, так и на развитие пространственного воображения. Суть игры в том, что вам надо за полторы минуты правильно собрать максимум чемоданов, то есть вам дан чемодан, в котором в опреденном порядке разложены вещи, и вам нужно добавить одну вещь (фотоаппарат) так, чтобы она оказалась на свободном месте, когда чемодан закроется:", "Вот этот желтый фотик надо поместить на свободное место. Вроде ничего сложного, но это надо делать максимально быстро, чтобы в результате набрать максимальное количество правильно сложенных чемоданов. Иногда нужно хорошенько подумать куда поместить фотик:", "Memory Matrix", "Здесь все просто - нужно за 12 попыток набрать максимум очков, правильно открыв как можно больше квадратов, сначала нам их показывают на пару секунд:", "А потом их нужно всех вспомнить:", "Rotation Matrix", "Все то же самое, что и в предыдущей игре, только матрица поворачивается после показа квадратиков, что довольно сильно осложняет игру. Здесь помимо памяти тренируется также пространственное воображение:", "Pinball Recall", "Тоже игра на память и пространственное воображение, одна из моих самых любимых. Вам на несколько секунд показывают поле с раставленными элементами, отражающими пинбольный шар:", "Затем элементы прячутся и нам показывают откуда стартует шарик:", "Наша задача - определить куда в итоге шарик попадет, для этого придется вспомнить расположение элементов и представить как он будет отражаться от них:", "Train of Thought", "В этой игре необходимо правильно направить каждый из пары десятков поездов. У каждого состава свой цвет и каждому из нех соответствует депо такого же цвета. Мы должны вовремя переключать стрелки на путях, чтобы каждый поезд попал в свое депо:", "Становится реально трудно когда нужно одновременно направить штук 5 поездов, учишься быстро реагировать на каждый состав.", "Disillusion", "Игра тренирует скорость переключения между двумя разными задачами. Есть поле с различными элементами, элементы отличаются по цвету и по фигурам, нарисованным в центре каждого элемента. На каждом ходу вам дается один элемент, и задача состоит в том, чтобы правильно присоединить его. Правильно - значит соединить с элементом того же цвета, либо с элементом, у которого такая же фигура. Если нам дается горизонтально расположенный элемент - то надо искать элементы с такой же фигурой, если же дается вертикальный - то надо искать элементы такого же цвета. Задача - присоединить правильно как можно больше элементов.", "Дали горизонтальный элемент - ищу элемент с такой же фигурой:", "Вертикальный элемент - надо искать элемент такого же цвета:", "Organic Order", "Пожалуй, моя любимая игра. Вам дается набор правил, по которым необходимо посадить семена, например: \"горох сажать только рядом с помидором, а помидор только слева от кукурузы\". Задача - за фикисрованное время правильно рассадить максимум грядок с семенами:", "Видите кнопку \"impossible\"? Она нужна, потому что бывают такие наборы правил, по которым рассадить растения просто невозможно, этот случай тоже нужно уметь определить.", "Pet Detective", "Здесь вы выступаете в роли детектива, которому нужно за фиксированное количество ходов подобрать и развести по домам всех животных:", "По сути, это игра про поиск оптимального пути. Нужно оптимально проехаться, собирая как можно больше питомцев и отпимально их развозить. Бывает правда сложно.", "Периодически, примерно раз в месяц, игра предлагает пройти IQ тест. Не знаю, насколько увеличивается IQ от игры в lumosity, подозреваю, что ни насколько. Вероятнее, что игры lumosity сами выступают своебобразным IQ тестом, и чем выше ваш IQ, тем лучше вы будете ", ".", "Гораздо интереснее посмотреть на раздел, который назывется Insights, здесь собрана различная аналитика того, как вы играете в lumosity. Например, есть раздел, в котором описано какая профессия вам подходит больше всего. Lumosity определяет ваши сильные и слабые стороны, основываясь на результатах ваших игр и сравнивает с результатами других людей того же возраста различных профессий. Для этого они строят такие диаграммы:", "То есть, они строят диаграмму выших сильных и слабых сторон, каждая ось диаграммы - определенная категория игр, одни игры на скорость, другие на память и т.д. Затем они накладывают вашу диаграмму на диаграммы людей такого же возраста, но разных профессий, например на вышеприведенной картинке мою диаграмму сравнивают со средней диаграммой людей, профессия которых связана с финансами. И получается, что диаграмма людей из финансов очень схожа с моей. Это значит, что финансисты в среднем играют в lumosity также как я.", "Также выдается список из тех профессий, который наиболее \"близки\" вам c точки зрения похожести диаграмм:", "Надеюсь, что в engineering входят айтишники.", "Конечно, не значит, что надо сломя голову менять профессию, если ваша не совпала с наболее похожей на вас по мнению lumosity, просто интересно, что оказыается, люди разных профессий играют в lumosity по-разному, и у каждой есть свой паттерн игры.", "И разумеется, если вы работаете в финансовом секторе, но ваша диаграмма не совпадает с диаграммой финансистов, то это не значит, что вы плохой экономист, просто ваш паттерн не совпадает со среднем в профессии. Также, если вы по профессии экономист, и ваша диаграмма близка к средней, значит вы играете в lumostiy также как и большиство в вашей профессии.", "Интересно, почему люди одной профессии играют в lumosity одинаково? Скорее всего, просто определенные профессии привлекают людей с определенным складом ума. Также, работа в различных сферах задействует разные стороны интеллекта.", "Конечно, игра в lumosity не сделает из вас Друзя или Вассермана, но определенные ментальные скиллы прокачать может, да и вообще это весело! Кроме того, никто не отменял эффект плацебо: может быть, вы будете лучше мыслить, если будете верить, что lumosity развивает ваш интеллект."], "date": ["18 октября 2017 г.", "Есть такой сайт - ", ", там много игр направленных на развитие интеллекта, у меня есть некоторый опыт игры на этом сайте, хотел бы им поделиться. Если честно, то я сомневаюсь, что игра в подобные игры может сделать вас умнее, скорее всего, играя в эти игры вы просто станете лучше в них играть. Тем не менее, играть в них просто весело и, если вам, например, нечем заняться в метро, то почему бы и нет? Правда, это небесплатно, если вы хотите играть в официальную версию.", "Всего там около пятидесяти игр, разбитых на следующие категорий:", "Вот мои любимые игры из этих категорий:", "Highway Hazards", "Здесь мы управляем картом, который, все время ускоряясь, едет по трехполосному шоссе, при этом вам надо постоянно маневрировать, объезжая различные препятствия. Сложность в том, что при наборе определнной скорости вы будете не успевать их объезжать. Цель игры - набрать максимальную скорость, держать ее максимальное время и избегать столкновений. Игра предупреждает о препятствиях:", "Speed Pack", "Игра направленная как на развитие скорости, так и на развитие пространственного воображения. Суть игры в том, что вам надо за полторы минуты правильно собрать максимум чемоданов, то есть вам дан чемодан, в котором в опреденном порядке разложены вещи, и вам нужно добавить одну вещь (фотоаппарат) так, чтобы она оказалась на свободном месте, когда чемодан закроется:", "Вот этот желтый фотик надо поместить на свободное место. Вроде ничего сложного, но это надо делать максимально быстро, чтобы в результате набрать максимальное количество правильно сложенных чемоданов. Иногда нужно хорошенько подумать куда поместить фотик:", "Memory Matrix", "Здесь все просто - нужно за 12 попыток набрать максимум очков, правильно открыв как можно больше квадратов, сначала нам их показывают на пару секунд:", "А потом их нужно всех вспомнить:", "Rotation Matrix", "Все то же самое, что и в предыдущей игре, только матрица поворачивается после показа квадратиков, что довольно сильно осложняет игру. Здесь помимо памяти тренируется также пространственное воображение:", "Pinball Recall", "Тоже игра на память и пространственное воображение, одна из моих самых любимых. Вам на несколько секунд показывают поле с раставленными элементами, отражающими пинбольный шар:", "Затем элементы прячутся и нам показывают откуда стартует шарик:", "Наша задача - определить куда в итоге шарик попадет, для этого придется вспомнить расположение элементов и представить как он будет отражаться от них:", "Train of Thought", "В этой игре необходимо правильно направить каждый из пары десятков поездов. У каждого состава свой цвет и каждому из нех соответствует депо такого же цвета. Мы должны вовремя переключать стрелки на путях, чтобы каждый поезд попал в свое депо:", "Становится реально трудно когда нужно одновременно направить штук 5 поездов, учишься быстро реагировать на каждый состав.", "Disillusion", "Игра тренирует скорость переключения между двумя разными задачами. Есть поле с различными элементами, элементы отличаются по цвету и по фигурам, нарисованным в центре каждого элемента. На каждом ходу вам дается один элемент, и задача состоит в том, чтобы правильно присоединить его. Правильно - значит соединить с элементом того же цвета, либо с элементом, у которого такая же фигура. Если нам дается горизонтально расположенный элемент - то надо искать элементы с такой же фигурой, если же дается вертикальный - то надо искать элементы такого же цвета. Задача - присоединить правильно как можно больше элементов.", "Дали горизонтальный элемент - ищу элемент с такой же фигурой:", "Вертикальный элемент - надо искать элемент такого же цвета:", "Organic Order", "Пожалуй, моя любимая игра. Вам дается набор правил, по которым необходимо посадить семена, например: \"горох сажать только рядом с помидором, а помидор только слева от кукурузы\". Задача - за фикисрованное время правильно рассадить максимум грядок с семенами:", "Видите кнопку \"impossible\"? Она нужна, потому что бывают такие наборы правил, по которым рассадить растения просто невозможно, этот случай тоже нужно уметь определить.", "Pet Detective", "Здесь вы выступаете в роли детектива, которому нужно за фиксированное количество ходов подобрать и развести по домам всех животных:", "По сути, это игра про поиск оптимального пути. Нужно оптимально проехаться, собирая как можно больше питомцев и отпимально их развозить. Бывает правда сложно.", "Периодически, примерно раз в месяц, игра предлагает пройти IQ тест. Не знаю, насколько увеличивается IQ от игры в lumosity, подозреваю, что ни насколько. Вероятнее, что игры lumosity сами выступают своебобразным IQ тестом, и чем выше ваш IQ, тем лучше вы будете ", ".", "Гораздо интереснее посмотреть на раздел, который назывется Insights, здесь собрана различная аналитика того, как вы играете в lumosity. Например, есть раздел, в котором описано какая профессия вам подходит больше всего. Lumosity определяет ваши сильные и слабые стороны, основываясь на результатах ваших игр и сравнивает с результатами других людей того же возраста различных профессий. Для этого они строят такие диаграммы:", "То есть, они строят диаграмму выших сильных и слабых сторон, каждая ось диаграммы - определенная категория игр, одни игры на скорость, другие на память и т.д. Затем они накладывают вашу диаграмму на диаграммы людей такого же возраста, но разных профессий, например на вышеприведенной картинке мою диаграмму сравнивают со средней диаграммой людей, профессия которых связана с финансами. И получается, что диаграмма людей из финансов очень схожа с моей. Это значит, что финансисты в среднем играют в lumosity также как я.", "Также выдается список из тех профессий, который наиболее \"близки\" вам c точки зрения похожести диаграмм:", "Надеюсь, что в engineering входят айтишники.", "Конечно, не значит, что надо сломя голову менять профессию, если ваша не совпала с наболее похожей на вас по мнению lumosity, просто интересно, что оказыается, люди разных профессий играют в lumosity по-разному, и у каждой есть свой паттерн игры.", "И разумеется, если вы работаете в финансовом секторе, но ваша диаграмма не совпадает с диаграммой финансистов, то это не значит, что вы плохой экономист, просто ваш паттерн не совпадает со среднем в профессии. Также, если вы по профессии экономист, и ваша диаграмма близка к средней, значит вы играете в lumostiy также как и большиство в вашей профессии.", "Интересно, почему люди одной профессии играют в lumosity одинаково? Скорее всего, просто определенные профессии привлекают людей с определенным складом ума. Также, работа в различных сферах задействует разные стороны интеллекта.", "Конечно, игра в lumosity не сделает из вас Друзя или Вассермана, но определенные ментальные скиллы прокачать может, да и вообще это весело! Кроме того, никто не отменял эффект плацебо: может быть, вы будете лучше мыслить, если будете верить, что lumosity развивает ваш интеллект."]},
{"title": "======Какие вопросы задают на собеседованиях на python junior'a/middl'a", "body": ["У меня есть некоторый опыт прохождения python - собеседований на позиции junior/middle python разработчика и я им поделюсь. Эти вопросы можно разделить на такие группы: основы python, более глубокие вопросы про python, обще-алгоритмические вопросы, вопросы про другие языки.", "Попробую осветить наиболее часто встречающиеся из них. Не секрет, что часто вопросы повторяются, конечно всегда может быть что-то оригинальное, но костяк вопросов остается примерно неизменным. К слову, надо быть готовым к написанию кода на листочке.", "Какие типы данных в python?", "Объясните следующий код:", "Что выведет на экран следующий код?", "Здесь создается функция - генератор, соответственно ", " будет напечатано один раз, далее числа от 0 до 9:", "Что здесь происходит?", "Здесь в объект ", " копируется не сам список, а только ссылка на него, соответственно из одного массива будет удалено два последних элемента, последняя строчка напечатает ", ".", "Какие есть элементы функционального программирования в python?", " позволяет применить какую-либо функцию к любому iterable - объекту:", "В python 2 map вернет список, но в третьей версии вернется объект - итератор. Соответственно все числа преобразуются в ", ".", " повзоляет отобрать только определенные элементы (например все числа больше 1). Так же, как и в случае с map, в python 2 возвращается список, но в python 3 вернется объект - итератор.", " повзоляет произвести какие-либо вычисления над элементами iterable - объекта", " функцию удобно использовать например для сортировки массива кортежей по, например, второму элементу:", "Как работает код вида:", "Тут мы имеем функцию с default аргументом - списком, этот список создается один раз, в момент определения функции, при каждом следующем вызове используется тот же список. Но на строке номер 8 мы вызываем функцию с новым списком, который и используется при этом вызове, на строке же номер 9 будет вызвана функция со списком из первого вызова, соответственно, будет напечатано:", "Напишите 3 способа инвертировать список в python.", "В первом случае вернется итератор. Первые два способа не изменяют исходный список, а создают новый, третий - изменяет.", "Как из ", " получить ", "?", "Или, что аналогично, но гораздо лучше (питоничнее и быстрее):", "Или, например, такой вариант (подсмотрел в книге ", "):", "Что делает with?", "Позволяет, например, делать что-нибудь с файлами, файл будет автоматически закрыт:", "Также ", " используется в многопоточном программировании для захвата ", "'а:", "Работа ", " ", " Менеджер контекста инкапсулирует try...except...finally паттерн.", "Внутренности python", "Что такое декоратор? Напишите свой декоратор, а потом декоратор с параметрами.", "Декоратор - это функция, которая меняет другую функцию. Простейший декоратор:", "Так можно применить декоратор:", "Или, что абсолютно аналогично:", "Декоратор с параметрами:", "Более сложный пример с декоратором:", "Когда я впервые увидел подобный код, я не мог понять как работает ", ", мне казалось, что это какая-то особенная декораторная магия, что-то вроде декоратора вложенного в декоратор. Чтобы разобраться, мне пришлось понять, как сделать то же самое без синтаксического сахара:", "То есть, по сути, это декоратор (", " обернутый в функцию ", ", задача которой принять аргумент ", " и передать его \"глубже\".", "Зачем нужны декораторы?", "Декораторы используются для ограничения доступа к некоторым ендпоинтам, например @login_required во Flask, также во Flask'e также используются для того, чтобы \"привязывать\" view к url'ам.", "Напишите декоратор, который замеряет время работы функции.", "Что такое генератор? Напишите свой генератор.", "Чтобы объяснить, что такое генератор, нужно сначала рассказать об итераторах. Итератор - это такой объект, у которого есть два метода - __", " и ", ". Итератор можно перебрать только один раз, после этого он будет \"исчерпан\". Пример итератора:", "Итератор можно использовать один раз, после чего он будет исчерпан, при этом будет выброшено исключение StopIteration:", "Использование итераторов при создании матрицы может не сработать:", "Также можно убедиться в том, что наш объект Counter - это self-iteraror, потому что его метод __iter__ возвращает сам объект (instance), в отличие от iterable - объектов типа list, у которых метод iter возвращает отдельный объект - итератор:", "Пример iterable - объекта, у него задается только __iter__ метод, по нему можно итерироваться сколько угодно раз:", "Генератор - это функция, которая возвращает итератор, каждый раз \"запоминает\" свое состояние и генерирует по одному элементу за раз. Создается генератор, используя ключевое слово ", ". Пример простого генератора:", "Как вы можете заметить, при вызове генератора он не был исполнен, потому что генераторы, в отличие от функций, не исполняются при вызове, а только при итерации по ним. Также видно, что генератор возвращает объект - генератор, который является итератором (есть next и __iter__). Кроме того, как вы можете заметить, генератор - это также self-iteraror.", "Генераторы, в отличие от функций, позволяют итерироваться по ним. Также генераторы \"замораживают\" свое состояние после yield. Генераторы используются при работе с большими массивами данных, чтобы не загружать их в память целиком:", "Но если использовать генератор (функция xrange в python 2 работает как генератор), то все будет ок:", "Чем python 2 отличается от 3?", "Конечно же, во втором питоне можно принтить без скобок, самое новое (асинхронность например) есть только в 3-ем питоне, также в нем есть поддержка юникода. В python 3 был улучшен GIL. В 3 ем python функция range стала такой как xrange во втором. Также в 3 питоне была добавлена библиотека ", ".", "Что такое GIL?", "GIL - это Global Interpreter Lock. Это механизм, который обеспечивает потокобезопасность в python, защищая память от неосмотрительных действий программиста. GIL обеспечивает то, что в каждый момент времени активен только один поток. Переключение между потоками такое быстрое, что может показаться, что ваша программа выполняет несколько потоков одновременно, хотя на деле активен только один поток.", "Чем итератор отличается от iterable - объекта?", "По итератору можно пройти циклом for только один раз, а по iterable - объекту сколько угодно. Iterable - объект не имеет функции next, в отличие от iterator.", "Хэширование. Что такое хэш-функция? Как определить, что можно хэшировать, а что нет?", "Словарь в питоне реализован на основе хэш - таблицы, поэтому ключами словаря могут быть только хэшируемые типы данных, соответственно, ключами словаря могут быть только неизменяемые типы данных.", "Какие алгоритмы сортировки знаете?", "Ну, тут все просто, я знаю только сортировку пузырьком, список будет отсортирован по возрастанию:", "Чем поток отличается от процесса?", "Потоки могут иметь доступ к области видимости друг друга, а процессы изолированы друг от друга.", "Расскажите про SQL join'ы?", "Создадим две таблицы :", "Тогда данный запрос:", "Вернет следующую таблицу:", "То есть INNER JOIN возвращает только \"пересечение\" из двух таблиц.", "Если сделать LEFT JOIN:", "То вернутся все результаты из левой таблицы и \"пересечение\" из правой:", "Если сделать RIGHT JOIN:", "То вернутся все результаты из правой таблицы и \"пересечение\" из левой:", "Если сделать FULL OUTER JOIN:", "То вернется вообще все из обоих таблиц:", "Эти SQL JOIN'ы могут быть представлены в виде диаграмм ", ":", "Что такое MVC?", "Паттерн проектирования Model View Controller, в котором Model отвечает за связь с БД, View - за представления данных (html шаблоны), а Сontroller - за обработку данных, полученных от модели и бизнес - логику.", "Какие основные принципы ООП?", "Что такое RESTful API?", "Это API, которое отвечает JSON'ом или XML'ом, принимает GET, POST, PUT, DELETE запросы, не сохраняет данные о клиенте, GET - запросы не должны приводить к изменению состояния сервера. Один запрос приводит к какому-либо одному действию.", "Если в глобальной области - то ничем, если же внутри функции - то без var - это глобальная перменная, а с var - локальная.", "Если вы изучите эту статью, то вы сможете ответить на наиболее часто встречающиеся вопросы на собеседованиях, конечно это не сделает вас экспертом в python. Возможно, я где-то не слишком точно отвечал на вопросы, но на собеседованиях и не требутся точных академических определений, важно, чтобы вы могли объяснить какие-то понятия своими словами. И, конечно, этого материала явно не достаточно, чтобы претендовать на позицию senior разработчика."], "date": ["9 октября 2017 г.", "У меня есть некоторый опыт прохождения python - собеседований на позиции junior/middle python разработчика и я им поделюсь. Эти вопросы можно разделить на такие группы: основы python, более глубокие вопросы про python, обще-алгоритмические вопросы, вопросы про другие языки.", "Попробую осветить наиболее часто встречающиеся из них. Не секрет, что часто вопросы повторяются, конечно всегда может быть что-то оригинальное, но костяк вопросов остается примерно неизменным. К слову, надо быть готовым к написанию кода на листочке.", "Какие типы данных в python?", "Объясните следующий код:", "Что выведет на экран следующий код?", "Здесь создается функция - генератор, соответственно ", " будет напечатано один раз, далее числа от 0 до 9:", "Что здесь происходит?", "Здесь в объект ", " копируется не сам список, а только ссылка на него, соответственно из одного массива будет удалено два последних элемента, последняя строчка напечатает ", ".", "Какие есть элементы функционального программирования в python?", " позволяет применить какую-либо функцию к любому iterable - объекту:", "В python 2 map вернет список, но в третьей версии вернется объект - итератор. Соответственно все числа преобразуются в ", ".", " повзоляет отобрать только определенные элементы (например все числа больше 1). Так же, как и в случае с map, в python 2 возвращается список, но в python 3 вернется объект - итератор.", " повзоляет произвести какие-либо вычисления над элементами iterable - объекта", " функцию удобно использовать например для сортировки массива кортежей по, например, второму элементу:", "Как работает код вида:", "Тут мы имеем функцию с default аргументом - списком, этот список создается один раз, в момент определения функции, при каждом следующем вызове используется тот же список. Но на строке номер 8 мы вызываем функцию с новым списком, который и используется при этом вызове, на строке же номер 9 будет вызвана функция со списком из первого вызова, соответственно, будет напечатано:", "Напишите 3 способа инвертировать список в python.", "В первом случае вернется итератор. Первые два способа не изменяют исходный список, а создают новый, третий - изменяет.", "Как из ", " получить ", "?", "Или, что аналогично, но гораздо лучше (питоничнее и быстрее):", "Или, например, такой вариант (подсмотрел в книге ", "):", "Что делает with?", "Позволяет, например, делать что-нибудь с файлами, файл будет автоматически закрыт:", "Также ", " используется в многопоточном программировании для захвата ", "'а:", "Работа ", " ", " Менеджер контекста инкапсулирует try...except...finally паттерн.", "Внутренности python", "Что такое декоратор? Напишите свой декоратор, а потом декоратор с параметрами.", "Декоратор - это функция, которая меняет другую функцию. Простейший декоратор:", "Так можно применить декоратор:", "Или, что абсолютно аналогично:", "Декоратор с параметрами:", "Более сложный пример с декоратором:", "Когда я впервые увидел подобный код, я не мог понять как работает ", ", мне казалось, что это какая-то особенная декораторная магия, что-то вроде декоратора вложенного в декоратор. Чтобы разобраться, мне пришлось понять, как сделать то же самое без синтаксического сахара:", "То есть, по сути, это декоратор (", " обернутый в функцию ", ", задача которой принять аргумент ", " и передать его \"глубже\".", "Зачем нужны декораторы?", "Декораторы используются для ограничения доступа к некоторым ендпоинтам, например @login_required во Flask, также во Flask'e также используются для того, чтобы \"привязывать\" view к url'ам.", "Напишите декоратор, который замеряет время работы функции.", "Что такое генератор? Напишите свой генератор.", "Чтобы объяснить, что такое генератор, нужно сначала рассказать об итераторах. Итератор - это такой объект, у которого есть два метода - __", " и ", ". Итератор можно перебрать только один раз, после этого он будет \"исчерпан\". Пример итератора:", "Итератор можно использовать один раз, после чего он будет исчерпан, при этом будет выброшено исключение StopIteration:", "Использование итераторов при создании матрицы может не сработать:", "Также можно убедиться в том, что наш объект Counter - это self-iteraror, потому что его метод __iter__ возвращает сам объект (instance), в отличие от iterable - объектов типа list, у которых метод iter возвращает отдельный объект - итератор:", "Пример iterable - объекта, у него задается только __iter__ метод, по нему можно итерироваться сколько угодно раз:", "Генератор - это функция, которая возвращает итератор, каждый раз \"запоминает\" свое состояние и генерирует по одному элементу за раз. Создается генератор, используя ключевое слово ", ". Пример простого генератора:", "Как вы можете заметить, при вызове генератора он не был исполнен, потому что генераторы, в отличие от функций, не исполняются при вызове, а только при итерации по ним. Также видно, что генератор возвращает объект - генератор, который является итератором (есть next и __iter__). Кроме того, как вы можете заметить, генератор - это также self-iteraror.", "Генераторы, в отличие от функций, позволяют итерироваться по ним. Также генераторы \"замораживают\" свое состояние после yield. Генераторы используются при работе с большими массивами данных, чтобы не загружать их в память целиком:", "Но если использовать генератор (функция xrange в python 2 работает как генератор), то все будет ок:", "Чем python 2 отличается от 3?", "Конечно же, во втором питоне можно принтить без скобок, самое новое (асинхронность например) есть только в 3-ем питоне, также в нем есть поддержка юникода. В python 3 был улучшен GIL. В 3 ем python функция range стала такой как xrange во втором. Также в 3 питоне была добавлена библиотека ", ".", "Что такое GIL?", "GIL - это Global Interpreter Lock. Это механизм, который обеспечивает потокобезопасность в python, защищая память от неосмотрительных действий программиста. GIL обеспечивает то, что в каждый момент времени активен только один поток. Переключение между потоками такое быстрое, что может показаться, что ваша программа выполняет несколько потоков одновременно, хотя на деле активен только один поток.", "Чем итератор отличается от iterable - объекта?", "По итератору можно пройти циклом for только один раз, а по iterable - объекту сколько угодно. Iterable - объект не имеет функции next, в отличие от iterator.", "Хэширование. Что такое хэш-функция? Как определить, что можно хэшировать, а что нет?", "Словарь в питоне реализован на основе хэш - таблицы, поэтому ключами словаря могут быть только хэшируемые типы данных, соответственно, ключами словаря могут быть только неизменяемые типы данных.", "Какие алгоритмы сортировки знаете?", "Ну, тут все просто, я знаю только сортировку пузырьком, список будет отсортирован по возрастанию:", "Чем поток отличается от процесса?", "Потоки могут иметь доступ к области видимости друг друга, а процессы изолированы друг от друга.", "Расскажите про SQL join'ы?", "Создадим две таблицы :", "orders:", "customers:", "Тогда данный запрос:", "Вернет следующую таблицу:", "То есть INNER JOIN возвращает только \"пересечение\" из двух таблиц.", "Если сделать LEFT JOIN:", "То вернутся все результаты из левой таблицы и \"пересечение\" из правой:", "Если сделать RIGHT JOIN:", "То вернутся все результаты из правой таблицы и \"пересечение\" из левой:", "Если сделать FULL OUTER JOIN:", "То вернется вообще все из обоих таблиц:", "Эти SQL JOIN'ы могут быть представлены в виде диаграмм ", ":", "Что такое MVC?", "Паттерн проектирования Model View Controller, в котором Model отвечает за связь с БД, View - за представления данных (html шаблоны), а Сontroller - за обработку данных, полученных от модели и бизнес - логику.", "Какие основные принципы ООП?", "Что такое RESTful API?", "Это API, которое отвечает JSON'ом или XML'ом, принимает GET, POST, PUT, DELETE запросы, не сохраняет данные о клиенте, GET - запросы не должны приводить к изменению состояния сервера. Один запрос приводит к какому-либо одному действию.", "Если в глобальной области - то ничем, если же внутри функции - то без var - это глобальная перменная, а с var - локальная.", "Если вы изучите эту статью, то вы сможете ответить на наиболее часто встречающиеся вопросы на собеседованиях, конечно это не сделает вас экспертом в python. Возможно, я где-то не слишком точно отвечал на вопросы, но на собеседованиях и не требутся точных академических определений, важно, чтобы вы могли объяснить какие-то понятия своими словами. И, конечно, этого материала явно не достаточно, чтобы претендовать на позицию senior разработчика."]},
{"title": "======Пишем будильник на питоне", "body": ["Хочется написать себе будильник, который стартовал бы в определенное время, проигрывал бы несколько композиций и выключался бы до следующего раза. Это возможно сделать, используя, например, библиотеку gstreamer. ", "Я буду писать его под Ubuntu, поскольку использую данную ОС дома. Также можно попробовать сделать то же самое под Raspbian, если у вас есть Raspberry. Будильник будет работать как демон, тоесть не будет блокировать терминал,  а будет работать в фоновом режиме.", "Установить небходимые библиотеки на Debian - системах можно так:", "Чтобы проверить, что все работает корректно, откройте интерпретатор python и сделайте такие импорты: ", "Также можно попробовать проиграть какой-нибудь аудиофайл:", "Для демонизации процесса понадобится библиотека ", ", установить ее можно так:", "Простейший демон с помощью данной библиотеки:", "Полезная команда, которая вам может пригодится, если вы запустили этот тестовый демон, или если вам нужно точно убить какой-то процесс в системе, сколько бы экземпляров данного процесса ни было:", "Разберем по частям, следующая команда выведет список процессов:", "Дальше отберем только python процессы:", "Затем удалим из полученного списка саму нашу команду", "И, наконец, отберем PID'ы процессов и убьем их:", "Gstreamer - это библиотека основанная на плагинах, один такой плагин - ", " мы будем использовать. Данные в ", " проходят через ", "Нам придется использовать элемент ", " для построения ", ". Также будет задействована библиоткека ", ". Простейший аудиоплеер с помощью ", ":", "При конце каждой песни на шину приходит сообщение ", "пользуясь этим, можно переключать песни, что и реализовано на строках 50-53.", "Если добавить в этот плеер ", " и логирование в файл ", ":", "Теперь вы можете запустить данный плеер:", "А в другом терминале мониторить лог:", "Также, вам может понадобится что-то отдебажить или принтануть, можете тогда перевести в блокирующий режим, задав foreground=True:", "Далее, хочется сделать так, чтобы после одного проигрывания снова устанавливался первый трек, для этого необходимо так изменить функцию ", ":", "Я добавил строки 14 и 15 - установку первого трека после того, как все треки проиграны, чтобы на следующий день будильник начал играть с первого трека, также необходимо поменять функцию ", "и добавить функцию ", ":", "Функция ", " возвращает числа от 0 до 6, которые соответствуют дням с понедельника по воскресенье. Сначала определяется текущее время (с. 30), если оно больше заданного, то демон спит до следующего дня (с. 40), а если меньше, то до заданного времени (стр. 45). Затем запускается бесконечный цикл, в котором будильник каждый раз играет и отправляется спать до следующего дня.", "Теперь добавим возможность остановить будильник и узнать статус (запущен или нет), для этого используем модуль", ":", "Теперь проверить статус демона, убить его или запустить можно с помощью аргументов ", "Для корректной работы нужно передать хотя бы один аргумент", "После выполнения любой из этих команд смотрите на то, что залогировалось (у меня лог задан \"/tmp/test.log\", вы можете поместить его куда хотите). Я добавил функцию ", ", для того, чтобы нельзя было включить несколько процессов одновременно. После небольшого рефакторинга получилось:", "Я собрал все настройки в начале, добавил функцию ", ", потому что я использовал один и тот же кусок кода дважды (строки 101-106). Соответственно, я вынес этот дублированный код в эту функцию, чтобы следовать принципу ", "что является хорошим тоном в программировании.", "И все вроде хорошо, и все работает, но потом я еще раз посмотрел на этот код:", "И осознал, что я написал кучу говнокода, посмотрел ", ", понял, что все можно сделать гораздо проще и решил переписать часть кода, убрав совсем функции ", " и подчистив "], "date": ["26 октября 2017 г.", "Хочется написать себе будильник, который стартовал бы в определенное время, проигрывал бы несколько композиций и выключался бы до следующего раза. Это возможно сделать, используя, например, библиотеку gstreamer. ", "Я буду писать его под Ubuntu, поскольку использую данную ОС дома. Также можно попробовать сделать то же самое под Raspbian, если у вас есть Raspberry. Будильник будет работать как демон, тоесть не будет блокировать терминал,  а будет работать в фоновом режиме.", "Установить небходимые библиотеки на Debian - системах можно так:", "Чтобы проверить, что все работает корректно, откройте интерпретатор python и сделайте такие импорты: ", "Также можно попробовать проиграть какой-нибудь аудиофайл:", "Для демонизации процесса понадобится библиотека ", ", установить ее можно так:", "Простейший демон с помощью данной библиотеки:", "Полезная команда, которая вам может пригодится, если вы запустили этот тестовый демон, или если вам нужно точно убить какой-то процесс в системе, сколько бы экземпляров данного процесса ни было:", "Разберем по частям, следующая команда выведет список процессов:", "Дальше отберем только python процессы:", "Затем удалим из полученного списка саму нашу команду", "И, наконец, отберем PID'ы процессов и убьем их:", "Gstreamer - это библиотека основанная на плагинах, один такой плагин - ", " мы будем использовать. Данные в ", " проходят через ", "Нам придется использовать элемент ", " для построения ", ". Также будет задействована библиоткека ", ". Простейший аудиоплеер с помощью ", ":", "При конце каждой песни на шину приходит сообщение ", "пользуясь этим, можно переключать песни, что и реализовано на строках 50-53.", "Если добавить в этот плеер ", " и логирование в файл ", ":", "Теперь вы можете запустить данный плеер:", "А в другом терминале мониторить лог:", "Также, вам может понадобится что-то отдебажить или принтануть, можете тогда перевести в блокирующий режим, задав foreground=True:", "Далее, хочется сделать так, чтобы после одного проигрывания снова устанавливался первый трек, для этого необходимо так изменить функцию ", ":", "Я добавил строки 14 и 15 - установку первого трека после того, как все треки проиграны, чтобы на следующий день будильник начал играть с первого трека, также необходимо поменять функцию ", "и добавить функцию ", ":", "Функция ", " возвращает числа от 0 до 6, которые соответствуют дням с понедельника по воскресенье. Сначала определяется текущее время (с. 30), если оно больше заданного, то демон спит до следующего дня (с. 40), а если меньше, то до заданного времени (стр. 45). Затем запускается бесконечный цикл, в котором будильник каждый раз играет и отправляется спать до следующего дня.", "Теперь добавим возможность остановить будильник и узнать статус (запущен или нет), для этого используем модуль", ":", "Теперь проверить статус демона, убить его или запустить можно с помощью аргументов ", "Для корректной работы нужно передать хотя бы один аргумент", "После выполнения любой из этих команд смотрите на то, что залогировалось (у меня лог задан \"/tmp/test.log\", вы можете поместить его куда хотите). Я добавил функцию ", ", для того, чтобы нельзя было включить несколько процессов одновременно. После небольшого рефакторинга получилось:", "Я собрал все настройки в начале, добавил функцию ", ", потому что я использовал один и тот же кусок кода дважды (строки 101-106). Соответственно, я вынес этот дублированный код в эту функцию, чтобы следовать принципу ", "что является хорошим тоном в программировании.", "И все вроде хорошо, и все работает, но потом я еще раз посмотрел на этот код:", "И осознал, что я написал кучу говнокода, посмотрел ", ", понял, что все можно сделать гораздо проще и решил переписать часть кода, убрав совсем функции ", " и подчистив "]},
{"title": "======Попытка разобраться с многопоточностью", "body": ["Многопоточность подразумевает, что несколько потоков будут исполняться параллельно. В идеале использование многопоточности ускоряет выполнение программы. Однако, в python есть такая штука как GIL, Global Interpreter Lock, которая обеспечивает то, что в каждый момент времени активен только один поток.", "Также GIL защищает внутренности питона и память от необдуманных действий программиста, но не защищает написанный код, чтобы сделать наш код потокобезопасным, нужно синхронизировать потоки, то есть предотвратить одновременный доступ к общим областям памяти.", "Попробуем написать код, который будет работать в два потока, просто добавляя числа к списку:", "После запуска получим странный результат:", "Мало того, что результат беспорядочный, при разных запусках результаты будут отличаться. Это происходит из-за того, что потоки не синхронизированы, а функция ", " непотокобезопасна. Чтобы это исправить попробуем использовать ", ", чтобы предотвратить одновременный доступ к списку:", "Но это не помогает:", "Дело в том, что когда мы обращаемся к списку на 30 строке, то потоки еще могут не закончить свою работу, поэтому список может быть не равен [1, 2, 3, 4, 5, 6] на момент вызова. Поэтому также необходимо использовать функцию ", ".", ", которая заставляет ждать тот поток в котором она вызвана пока закончится поток ", ":", "На строках 28 и 29 мы заставляем главный поток ждать пока закончатся потоки ", " и ", " и теперь вывод нормальный:", "Интересно, что если рассматривать задачу добавления к списку нескольких чисел, то вариант с многопоточностью оказывается примерно в 50 раз медленнее обычного кода:", "Что как бы намекает нам, что использовать многопоточность для этой задачи просто глупо. Хотя, конечно, она демонстрирует важность использования Lock'а и join'ов. Но можно придумать задачу, где многопоточность действительно нужна, например, если нужно скачать несколько файлов. Попробуем закачать несколько тестовых файлов по 10 мегабайт без многопоточности и с ней:", "Видно, что вариант с многопоточной закачкой в некоторых случаях до 2 раз быстрее.", "Многопоточность - вещь нужная, но ее нужно уметь правильно готовить, не забывать синхронизировать потоки и использовать с умом."], "date": ["5 ноября 2017 г.", "Многопоточность подразумевает, что несколько потоков будут исполняться параллельно. В идеале использование многопоточности ускоряет выполнение программы. Однако, в python есть такая штука как GIL, Global Interpreter Lock, которая обеспечивает то, что в каждый момент времени активен только один поток.", "Также GIL защищает внутренности питона и память от необдуманных действий программиста, но не защищает написанный код, чтобы сделать наш код потокобезопасным, нужно синхронизировать потоки, то есть предотвратить одновременный доступ к общим областям памяти.", "Попробуем написать код, который будет работать в два потока, просто добавляя числа к списку:", "После запуска получим странный результат:", "Мало того, что результат беспорядочный, при разных запусках результаты будут отличаться. Это происходит из-за того, что потоки не синхронизированы, а функция ", " непотокобезопасна. Чтобы это исправить попробуем использовать ", ", чтобы предотвратить одновременный доступ к списку:", "Но это не помогает:", "Дело в том, что когда мы обращаемся к списку на 30 строке, то потоки еще могут не закончить свою работу, поэтому список может быть не равен [1, 2, 3, 4, 5, 6] на момент вызова. Поэтому также необходимо использовать функцию ", ".", ", которая заставляет ждать тот поток в котором она вызвана пока закончится поток ", ":", "На строках 28 и 29 мы заставляем главный поток ждать пока закончатся потоки ", " и ", " и теперь вывод нормальный:", "Интересно, что если рассматривать задачу добавления к списку нескольких чисел, то вариант с многопоточностью оказывается примерно в 50 раз медленнее обычного кода:", "Что как бы намекает нам, что использовать многопоточность для этой задачи просто глупо. Хотя, конечно, она демонстрирует важность использования Lock'а и join'ов. Но можно придумать задачу, где многопоточность действительно нужна, например, если нужно скачать несколько файлов. Попробуем закачать несколько тестовых файлов по 10 мегабайт без многопоточности и с ней:", "Видно, что вариант с многопоточной закачкой в некоторых случаях до 2 раз быстрее.", "Многопоточность - вещь нужная, но ее нужно уметь правильно готовить, не забывать синхронизировать потоки и использовать с умом."]},
{"title": "======Делаем navbar", "body": ["Иногда нужно сделать navbar и переключать класс active на выбранной ссылке. Это можно сделать по-разному, расскажу об одном решении. Допустим у нас есть простое Flask - приложение:", "И ", ":", ":", "И хочется добавлять класс ", "при клике на каждую ссылку в navbar'e. Можно использовать передачу переменных в шаблон:", "Но можно ведь использовать ", ", сначала хочется сделать что-то вроде (mysite.js):", "Но это не будет работать, потому что после переключения класса страница обновится, и класс исчезнет со ссылки. Можно сделать по-другому:", "Тоесть используя  ", " получаем текущий адрес, регулярным выражением пытаемся получить правую часть адреса, если не получается, то ставим ", " на первую ссылку, в другом случае находим соответствующую ссылку и ставим класс ей.", "Говорят, что если у тебя есть проблема, и ты ее решаешь с помощью регулярных выражений, то у тебя две проблемы. Пожалуй, лучше переписать этот код, не используя регулярки:", "Есть разные способы решить данную проблему, я описал некоторые из них, надеюсь для кого-то это было полезно."], "date": ["5 ноября 2017 г.", "Иногда нужно сделать navbar и переключать класс active на выбранной ссылке. Это можно сделать по-разному, расскажу об одном решении. Допустим у нас есть простое Flask - приложение:", "И ", ":", ":", "И хочется добавлять класс ", "при клике на каждую ссылку в navbar'e. Можно использовать передачу переменных в шаблон:", "Но можно ведь использовать ", ", сначала хочется сделать что-то вроде (mysite.js):", "Но это не будет работать, потому что после переключения класса страница обновится, и класс исчезнет со ссылки. Можно сделать по-другому:", "Тоесть используя  ", " получаем текущий адрес, регулярным выражением пытаемся получить правую часть адреса, если не получается, то ставим ", " на первую ссылку, в другом случае находим соответствующую ссылку и ставим класс ей.", "Говорят, что если у тебя есть проблема, и ты ее решаешь с помощью регулярных выражений, то у тебя две проблемы. Пожалуй, лучше переписать этот код, не используя регулярки:", "Есть разные способы решить данную проблему, я описал некоторые из них, надеюсь для кого-то это было полезно."]},
{"title": "======Как сложить числа от 1 до 100", "body": ["Согласно распространенной истории, школьный учитель математики ", " был ленив. Чтобы чем-то занять детей на долгое время, а самому вздремнуть, он попросил их сложить числа от 1 до 100.", "Гаусс быстро дал ответ: 5050. Так быстро? Учитель не поверил, но юный гений оказался прав. Складывать все числа от 1 до 100 - это для слабаков! Гаусс нашёл формулу:", "$$\\sum_{1}^{n}=\\frac{n(n+1)}{2}$$", "$$\\sum_{1}^{100}=\\frac{100(100+1)}{2}=50\\cdot 101=5050$$", "Как это у него получилось? Давайте попробуем разобраться на примере суммы от 1 до 10.", "Запишем числа от 1 до 10 в виде матрицы c двумя строками и пятью столбцами:", "$$\\left(\\begin{array}{c}1&2&3&4&5\\\\ 10&9&8&7&6 \\end{array}\\right)$$", "Интересно, сумма каждого столбца равна 11 или $n+1$. И всего таких пар чисел 5 или $\\frac{n}{2}$. Получаем нашу формулу:", "$$Число\\ столбцов\\cdotСумма\\ чисел\\ в\\ стобцах=\\frac{n}{2}\\cdot(n+1)$$", "Если нечетное число слагаемых?", "Что, если сложить числа от 1 до 9? У нас не хватает одного числа для составления пяти пар, но мы можем взять ноль:", "$$\\left(\\begin{array}{c}0&1&2&3&4\\\\ 9&8&7&6&5 \\end{array}\\right)$$", "Сумма столбцов теперь равна 9 или ровно $n$. А количество столбцов? По-прежнему пять столбцов (спасибо нулю!), но теперь количество столбцов определяется как  $\\frac{n+1}{2}$ ( y нас $n+1$ чиcел и вдвое меньше столбцов).", "$$Число\\ столбцов\\cdotСумма\\ чисел\\ в\\ стобцах=\\frac{n+1}{2}\\cdot n$$", "Мы немного по-разному считаем сумму чисел в этих двух случаях.", "Может быть, есть способ одинаково посчитать сумму для четного и нечетного количества слагаемых?", "Вместо того, чтобы делать из чисел своеобразную «петлю»,  давайте запишем их в две строки, при этом количество чисел умножим на два:", "$$\\left(\\begin{array}{c}1&2&3&4&5&6&7&8&9&10\\\\10&9&8&7&6&5&4&3&2&1 \\end{array}\\right)$$", "Для нечетного случая:", "$$\\left(\\begin{array}{c}1&2&3&4&5&6&7&8&9\\\\9&8&7&6&5&4&3&2&1\\end{array}\\right)$$", "Видно, что в обоих случаях сумма столбцов равна $n+1$, а количество столбцов $n$.", "$$Число\\ столбцов\\cdotСумма\\ чисел\\ в\\ стобцах=n\\cdot(n+1)$$", "Но нам нужна сумма только одной строки, поэтому:", "$$\\frac{n\\cdot(n+1)}{2}$$", "Есть еще одно объяснение, давайте попробуем сложить крестики, допутим у нас есть крестики:", "x", "xx", "xxx", "xxxx", "xxxxx", "Как нам посчитать количество крестиков? Давайте добавим такое же количество ноликов:", "x ooooo", "xx oooo", "xxx ooo", "xxxx oo", "xxxxx o", "Похоже просто на другое представление второго способа — каждая последующая строка пирамидки имеет больше крестиков и меньше ноликов. Количество всех крестиков и ноликов — площадь прямоугольника.", "$$Площадь=Высота\\cdotШирина=n\\cdot(n+1)$$", "Но нам нужна сумма крестиков, поэтому:", "$$\\frac{n\\cdot(n+1)}{2}$$", "Известно: $Среднее\\ арифметическое=\\frac{Сумма}{Количество\\ членов}$", "Тогда: $Сумма = среднее\\ арифметическое\\cdotКоличество\\ членов$", "Количество членов нам известно — $n$. А как выразить Cреднее арифметическое?", "Заметьте, числа распределены равномерно. На каждое большое число приходится маленькое, расположенное на другом конце.", "1 2 3, среднее 2", "1 2 3 4, среднее 2.5", "В этом случае среднее арифметическое -  это среднее арфиметическое чисел 1 и $n$, тоесть $Среднее\\ арифметическое=\\frac{n+1}{2}$", "$$Сумма = \\frac{n+1}{2}\\cdot n$$", "Все мы знаем, что определенный интеграл вычисляет сумму. Посчитаем сумму от 1 до 100 интегралом? Да, но для начала давайте хотя бы найдем сумму от 1 до 3. Пусть наши числа будут функцией y(x). Нарисуем картинку:", "Высоты трех прямоугольников — как раз числа от 1 до 3. Проведем прямую через середины «шапок»:", "Неплохо было бы найти уравнение этой прямой. Она проходит через точки (1.5;1) и (2.5;2). $y=k\\cdot x+b$.", "$$\\begin{cases}2.5k + b = 2\\\\1.5k + b = 1\\end{cases}\\Rightarrow k=1; b=-0.5$$", "Таким образом, уравнение прямой, которой мы можем аппроксимировать наши прямоугольники $y=x-0.5$", "Она отсекает от прямоугольников желтые треугольники, но «добавляет» к ним сверху голубые. Желтые равны голубым. Сначала убедимся, что использование интеграла ведёт к формуле Гаусса:", "$$\\int_{1}^{n+1} (x-\\frac{1}{2}) \\, dx = (\\frac{x^{2}}{2}-\\frac{x}{2}){|}^{n+1}_{1}=\\frac{(n+1)^{2}}{2}-\\frac{n+1}{2}=\\frac{n^{2}+2n+1-n-1}{2}=\\frac{n^{2}+n}{2}$$", "Теперь посчитаем сумму от 1 до 3, по иксу берем от 1 до 4, чтобы все наши три прямоугольника попали в интеграл:", "$$\\int_{1}^{4} (x-\\frac{1}{2}) \\, dx = (\\frac{x^{2}}{2}-\\frac{x}{2}){|}^{4}_{1}=\\frac{4^{2}}{2}-2-(0.5-0.5)=6$$", "Чтобы посчитать сумму от 1 до 100 нужно взять интеграл от 1 до 101:", "$$\\int_{1}^{101} (x-\\frac{1}{2}) \\, dx = (\\frac{x^{2}}{2}-\\frac{x}{2}){|}^{101}_{1}=\\frac{101^{2}}{2}-50.5-(0.5-0.5)=5100.5-50.5=5050$$", "Наша формула позволяет быстро подсчитать сумму чисел. Заметьте:", "$$\\frac{n(n+1)}{2}=\\frac{n^{2}}{2}+\\frac{n}{2}$$", "В первый день на ваш сайт зашел один человек, на второй день двое… Каждый день количество посещений увеличивалось на 1. Сколько всего посещений наберет сайт к концу 1000-го дня?", "$$\\frac{n(n+1)}{2}=\\frac{n^{2}}{2}+\\frac{n}{2}=\\frac{1000^{2}}{2}+\\frac{1000}{2} = 500000+500=500500$$", "Данная статья — перевод с небольшим моим дополнением, ", "."], "date": ["8 октября 2017 г.", "Согласно распространенной истории, школьный учитель математики ", " был ленив. Чтобы чем-то занять детей на долгое время, а самому вздремнуть, он попросил их сложить числа от 1 до 100.", "Гаусс быстро дал ответ: 5050. Так быстро? Учитель не поверил, но юный гений оказался прав. Складывать все числа от 1 до 100 - это для слабаков! Гаусс нашёл формулу:", "$$\\sum_{1}^{n}=\\frac{n(n+1)}{2}$$", "$$\\sum_{1}^{100}=\\frac{100(100+1)}{2}=50\\cdot 101=5050$$", "Как это у него получилось? Давайте попробуем разобраться на примере суммы от 1 до 10.", "Запишем числа от 1 до 10 в виде матрицы c двумя строками и пятью столбцами:", "$$\\left(\\begin{array}{c}1&2&3&4&5\\\\ 10&9&8&7&6 \\end{array}\\right)$$", "Интересно, сумма каждого столбца равна 11 или $n+1$. И всего таких пар чисел 5 или $\\frac{n}{2}$. Получаем нашу формулу:", "$$Число\\ столбцов\\cdotСумма\\ чисел\\ в\\ стобцах=\\frac{n}{2}\\cdot(n+1)$$", "Если нечетное число слагаемых?", "Что, если сложить числа от 1 до 9? У нас не хватает одного числа для составления пяти пар, но мы можем взять ноль:", "$$\\left(\\begin{array}{c}0&1&2&3&4\\\\ 9&8&7&6&5 \\end{array}\\right)$$", "Сумма столбцов теперь равна 9 или ровно $n$. А количество столбцов? По-прежнему пять столбцов (спасибо нулю!), но теперь количество столбцов определяется как  $\\frac{n+1}{2}$ ( y нас $n+1$ чиcел и вдвое меньше столбцов).", "$$Число\\ столбцов\\cdotСумма\\ чисел\\ в\\ стобцах=\\frac{n+1}{2}\\cdot n$$", "Мы немного по-разному считаем сумму чисел в этих двух случаях.", "Может быть, есть способ одинаково посчитать сумму для четного и нечетного количества слагаемых?", "Вместо того, чтобы делать из чисел своеобразную «петлю»,  давайте запишем их в две строки, при этом количество чисел умножим на два:", "$$\\left(\\begin{array}{c}1&2&3&4&5&6&7&8&9&10\\\\10&9&8&7&6&5&4&3&2&1 \\end{array}\\right)$$", "Для нечетного случая:", "$$\\left(\\begin{array}{c}1&2&3&4&5&6&7&8&9\\\\9&8&7&6&5&4&3&2&1\\end{array}\\right)$$", "Видно, что в обоих случаях сумма столбцов равна $n+1$, а количество столбцов $n$.", "$$Число\\ столбцов\\cdotСумма\\ чисел\\ в\\ стобцах=n\\cdot(n+1)$$", "Но нам нужна сумма только одной строки, поэтому:", "$$\\frac{n\\cdot(n+1)}{2}$$", "Есть еще одно объяснение, давайте попробуем сложить крестики, допутим у нас есть крестики:", "x", "xx", "xxx", "xxxx", "xxxxx", "Как нам посчитать количество крестиков? Давайте добавим такое же количество ноликов:", "x ooooo", "xx oooo", "xxx ooo", "xxxx oo", "xxxxx o", "Похоже просто на другое представление второго способа — каждая последующая строка пирамидки имеет больше крестиков и меньше ноликов. Количество всех крестиков и ноликов — площадь прямоугольника.", "$$Площадь=Высота\\cdotШирина=n\\cdot(n+1)$$", "Но нам нужна сумма крестиков, поэтому:", "$$\\frac{n\\cdot(n+1)}{2}$$", "Известно: $Среднее\\ арифметическое=\\frac{Сумма}{Количество\\ членов}$", "Тогда: $Сумма = среднее\\ арифметическое\\cdotКоличество\\ членов$", "Количество членов нам известно — $n$. А как выразить Cреднее арифметическое?", "Заметьте, числа распределены равномерно. На каждое большое число приходится маленькое, расположенное на другом конце.", "1 2 3, среднее 2", "1 2 3 4, среднее 2.5", "В этом случае среднее арифметическое -  это среднее арфиметическое чисел 1 и $n$, тоесть $Среднее\\ арифметическое=\\frac{n+1}{2}$", "$$Сумма = \\frac{n+1}{2}\\cdot n$$", "Все мы знаем, что определенный интеграл вычисляет сумму. Посчитаем сумму от 1 до 100 интегралом? Да, но для начала давайте хотя бы найдем сумму от 1 до 3. Пусть наши числа будут функцией y(x). Нарисуем картинку:", "Высоты трех прямоугольников — как раз числа от 1 до 3. Проведем прямую через середины «шапок»:", "Неплохо было бы найти уравнение этой прямой. Она проходит через точки (1.5;1) и (2.5;2). $y=k\\cdot x+b$.", "$$\\begin{cases}2.5k + b = 2\\\\1.5k + b = 1\\end{cases}\\Rightarrow k=1; b=-0.5$$", "Таким образом, уравнение прямой, которой мы можем аппроксимировать наши прямоугольники $y=x-0.5$", "Она отсекает от прямоугольников желтые треугольники, но «добавляет» к ним сверху голубые. Желтые равны голубым. Сначала убедимся, что использование интеграла ведёт к формуле Гаусса:", "$$\\int_{1}^{n+1} (x-\\frac{1}{2}) \\, dx = (\\frac{x^{2}}{2}-\\frac{x}{2}){|}^{n+1}_{1}=\\frac{(n+1)^{2}}{2}-\\frac{n+1}{2}=\\frac{n^{2}+2n+1-n-1}{2}=\\frac{n^{2}+n}{2}$$", "Теперь посчитаем сумму от 1 до 3, по иксу берем от 1 до 4, чтобы все наши три прямоугольника попали в интеграл:", "$$\\int_{1}^{4} (x-\\frac{1}{2}) \\, dx = (\\frac{x^{2}}{2}-\\frac{x}{2}){|}^{4}_{1}=\\frac{4^{2}}{2}-2-(0.5-0.5)=6$$", "Чтобы посчитать сумму от 1 до 100 нужно взять интеграл от 1 до 101:", "$$\\int_{1}^{101} (x-\\frac{1}{2}) \\, dx = (\\frac{x^{2}}{2}-\\frac{x}{2}){|}^{101}_{1}=\\frac{101^{2}}{2}-50.5-(0.5-0.5)=5100.5-50.5=5050$$", "Наша формула позволяет быстро подсчитать сумму чисел. Заметьте:", "$$\\frac{n(n+1)}{2}=\\frac{n^{2}}{2}+\\frac{n}{2}$$", "В первый день на ваш сайт зашел один человек, на второй день двое… Каждый день количество посещений увеличивалось на 1. Сколько всего посещений наберет сайт к концу 1000-го дня?", "$$\\frac{n(n+1)}{2}=\\frac{n^{2}}{2}+\\frac{n}{2}=\\frac{1000^{2}}{2}+\\frac{1000}{2} = 500000+500=500500$$", "Данная статья — перевод с небольшим моим дополнением, ", "."]}
]